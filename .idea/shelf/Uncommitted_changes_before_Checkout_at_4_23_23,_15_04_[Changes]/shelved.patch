Index: app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ImportService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.northeastern.nucs5520sp_musiclyicsapp.final_project;\n\nimport static edu.northeastern.nucs5520sp_musiclyicsapp.final_project.App.CHANNEL_ID;\n\nimport androidx.annotation.Nullable;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.app.ActivityCompat;\nimport androidx.core.app.NotificationCompat;\nimport androidx.core.app.NotificationManagerCompat;\n\nimport android.Manifest;\nimport android.annotation.SuppressLint;\nimport android.app.Notification;\nimport android.app.PendingIntent;\nimport android.app.Service;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.content.pm.PackageManager;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport edu.northeastern.nucs5520sp_musiclyicsapp.R;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.GeniusSong;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.SpotifyArtist;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.SpotifySong;\n\npublic class ImportService extends Service {\n\n    private ArrayList<SpotifySong> spotifySongsList;\n    private SpotifyService spotifyService;\n    private LyricsService lyricsService;\n    private ArrayList<GeniusSong> outputList;\n\n    // Credit: https://towardsdatascience.com/using-the-spotify-api-with-your-android-application-the-essentials-1a3c1bc36b9e\n    // Above credit for getting the Spotify songs in the playlist using spotify API.\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n\n        String sharedPlaylistLink = intent.getStringExtra(\"Shared Playlist Link\");\n\n        spotifyService = new SpotifyService(getApplicationContext());\n        lyricsService = new LyricsService(getApplicationContext());\n\n        outputList = new ArrayList<>();\n\n        SharedPreferences sharedPreferences = this.getSharedPreferences(\"SPOTIFY\", 0);\n        // If sharedPreferences is empty, user hasn't authorized this app to access their spotify account.\n        // Go to ActivitySpotifyAuth.\n        Log.d(\"Spotify token\", sharedPreferences.getString(\"token\",\"\"));\n//        if (sharedPreferences.getString(\"token\",\"\").equals(\"\")) {\n//            Log.d(\"Inside If\", \"Inside the if clause in ImportService when no Spotify token\");\n//            Toast.makeText(this, \"Need authorization with your Spotify account to read your playlist information\", Toast.LENGTH_SHORT).show();\n//            Intent intentAuth = new Intent(ImportService.this, ActivitySpotifyAuth.class);\n//            intentAuth.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n//            startActivity(intentAuth);\n//        }\n\n        Toast.makeText(this, \"Need authorization with your Spotify account to read your playlist information\", Toast.LENGTH_SHORT).show();\n        Intent intentAuth = new Intent(ImportService.this, ActivitySpotifyAuth.class);\n        intentAuth.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        startActivity(intentAuth);\n\n        getTracks(sharedPlaylistLink);\n\n        return START_NOT_STICKY;\n    }\n\n    // Whatever needs to be done with the songs obtained need to happen right below\n    // songsList = songService.getSongs(); (because of asynchronous nature of the request)\n    private void getTracks(String sharedPlaylistLink) {\n        // Extract the playlist ID from sharedPlaylistLink.\n        Pattern pattern = Pattern.compile(\"/playlist/(.*?)\\\\?si=\");\n        Matcher matcher = pattern.matcher(sharedPlaylistLink);\n        String playlistId = \"\";\n        if (matcher.find()) {\n            playlistId = matcher.group(1);\n        }\n\n        spotifyService.getSongsFromPlaylist(playlistId, 100, 0, new VolleyCallback() {\n            @Override\n            public void onSuccess(boolean finished) {\n                spotifySongsList = spotifyService.getSongs();\n\n                // Post a notification indicating that our app has started to extract songs from Spotify Playlist using Spotify API.\n                NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(ImportService.this, CHANNEL_ID)\n                        .setContentTitle(\"Reading Playlist Content\")\n                        .setContentText(\"Reading the songs in your shared Spotify playlist...\")\n                        .setSmallIcon(R.mipmap.ic_launcher_music);\n\n                startForeground(1, notificationBuilder.build());\n\n                // Songs in songsList can be used as input to the Genius API.\n                if (finished) {\n\n                    // Loop through the songs in songsList and extract lyrics for each song.\n                    for (SpotifySong spotifySong : spotifySongsList) {\n                        // Song info setup.\n                        String songName = spotifySong.getSongName();\n                        ArrayList<String> artistsList = new ArrayList<>();\n                        for (SpotifyArtist spotifyArtist : spotifySong.getArtists()) {\n                            artistsList.add(spotifyArtist.getArtistName());\n                        }\n                        // Get the GeniusSong with lyrics inside.\n                        lyricsService.getLyricsForSong(songName, artistsList, new VolleyCallback() {\n                            @Override\n                            public void onSuccess(boolean finished) {\n\n                            }\n\n                            @SuppressLint(\"DefaultLocale\")\n                            @Override\n                            public void onLyricsSuccess(GeniusSong outputGeniusSong) {\n                                Log.d(\"output received in ImportService's callback\", outputGeniusSong.getLyrics());\n\n                                outputList.add(outputGeniusSong);\n\n                                // Change the notification to show progress in extracting song lyrics with Genius API and scraping Genius.com.\n                                notificationBuilder.setContentTitle(\"Getting Lyrics\")\n                                        .setContentText(String.format(\"Lyrics extraction progress: %d / %d\", outputList.size(), spotifySongsList.size()));\n                                if (ActivityCompat.checkSelfPermission(ImportService.this, Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED) {\n                                    // TODO: Consider calling\n                                    //    ActivityCompat#requestPermissions\n                                    // here to request the missing permissions, and then overriding\n                                    //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n                                    //                                          int[] grantResults)\n                                    // to handle the case where the user grants the permission. See the documentation\n                                    // for ActivityCompat#requestPermissions for more details.\n                                    return;\n                                }\n                                NotificationManagerCompat.from(ImportService.this).notify(1, notificationBuilder.build());\n                                Log.d(\"outputList size\", String.valueOf(outputList.size()));\n\n                                // If the size of the outputList is the same as the size of the spotifySongList, we know lyrics extraction is complete.\n                                if (outputList.size() == spotifySongsList.size()) {\n                                    // Cancel the old notification displaying the import progress and create a new one that is clickable.\n                                    NotificationManagerCompat.from(ImportService.this).cancel(1);\n                                    // If user clicks on the notification, lead to the new Activity displaying import results.\n                                    Intent intent = new Intent(ImportService.this, ActivityImportResult.class);\n                                    Log.d(\"outputList size before putting in intent\", String.valueOf(outputList.size()));\n\n                                    // Put each GeniusSong in outputList into intent's bundle;\n                                    intent.putExtra(\"outputList size\", outputList.size());\n//                                    for (int i = 0; i < outputList.size(); i++) {\n//                                        intent.putExtra(String.format(\"outputList song %d\", i + 1), outputList.get(i));\n//                                    }\n\n                                    PendingIntent pendingIntent = PendingIntent.getActivity(ImportService.this, 0, intent, 0);\n                                    NotificationCompat.Builder notificationBuilderComplete = new NotificationCompat.Builder(ImportService.this, CHANNEL_ID)\n                                            .setContentTitle(\"Import and Lyrics Extraction Complete\")\n                                            .setContentText(\"Click this to check out the results\")\n                                            .setSmallIcon(R.mipmap.ic_launcher_music)\n                                            .setContentIntent(pendingIntent);\n                                    NotificationManagerCompat.from(ImportService.this).notify(2, notificationBuilderComplete.build());\n                                }\n                            }\n                        });\n\n                        // Cope with Genius API's rate limit for search, which is 1 per second.\n                        try {\n                            Thread.sleep(1000);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n\n                }\n            }\n\n            @Override\n            public void onLyricsSuccess(GeniusSong geniusSong) {\n\n            }\n        });\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ImportService.java b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ImportService.java
--- a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ImportService.java	(revision faae7fba23e56ea645202596e48d04ddca17b77e)
+++ b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ImportService.java	(date 1682273158148)
@@ -71,6 +71,12 @@
         return START_NOT_STICKY;
     }
 
+    @Nullable
+    @Override
+    public IBinder onBind(Intent intent) {
+        return null;
+    }
+
     // Whatever needs to be done with the songs obtained need to happen right below
     // songsList = songService.getSongs(); (because of asynchronous nature of the request)
     private void getTracks(String sharedPlaylistLink) {
@@ -134,7 +140,6 @@
                                     return;
                                 }
                                 NotificationManagerCompat.from(ImportService.this).notify(1, notificationBuilder.build());
-                                Log.d("outputList size", String.valueOf(outputList.size()));
 
                                 // If the size of the outputList is the same as the size of the spotifySongList, we know lyrics extraction is complete.
                                 if (outputList.size() == spotifySongsList.size()) {
@@ -142,13 +147,14 @@
                                     NotificationManagerCompat.from(ImportService.this).cancel(1);
                                     // If user clicks on the notification, lead to the new Activity displaying import results.
                                     Intent intent = new Intent(ImportService.this, ActivityImportResult.class);
-                                    Log.d("outputList size before putting in intent", String.valueOf(outputList.size()));
-
-                                    // Put each GeniusSong in outputList into intent's bundle;
-                                    intent.putExtra("outputList size", outputList.size());
-//                                    for (int i = 0; i < outputList.size(); i++) {
-//                                        intent.putExtra(String.format("outputList song %d", i + 1), outputList.get(i));
-//                                    }
+                                    Log.d("outputList second song name", outputList.get(1).getLyrics());
+                                    intent.putExtra("outputList_size", outputList.size());
+                                    Log.d("size", String.valueOf(outputList.size()));
+                                    for(int i = 0; i < outputList.size(); i ++){
+                                        intent.putExtra("song_name" + i, outputList.get(i).getSongName());
+                                        intent.putExtra("song_artist" + i, outputList.get(i).getArtistsString());
+                                        intent.putExtra("song_lyric" + i, outputList.get(i).getLyrics());
+                                    }
 
                                     PendingIntent pendingIntent = PendingIntent.getActivity(ImportService.this, 0, intent, 0);
                                     NotificationCompat.Builder notificationBuilderComplete = new NotificationCompat.Builder(ImportService.this, CHANNEL_ID)
@@ -178,10 +184,4 @@
             }
         });
     }
-
-    @Nullable
-    @Override
-    public IBinder onBind(Intent intent) {
-        return null;
-    }
 }
\ No newline at end of file
Index: app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ActivityImportResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.northeastern.nucs5520sp_musiclyicsapp.final_project;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport android.annotation.SuppressLint;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Parcelable;\nimport android.util.Log;\n\nimport org.checkerframework.checker.units.qual.A;\n\nimport java.util.ArrayList;\n\nimport edu.northeastern.nucs5520sp_musiclyicsapp.R;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.GeniusSong;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.adapters.ImportResultAdapter;\n\npublic class ActivityImportResult extends AppCompatActivity {\n\n    private ArrayList<GeniusSong> outputList;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_import_result);\n\n        outputList = new ArrayList<>();\n\n        // Obtain the outputList that contains GeniusSongs object\n        int outputListSize = getIntent().getIntExtra(\"outputList size\", 0);\n//        if (outputListSize > 0) {\n//            for (int i = 0; i < outputListSize; i++) {\n//                @SuppressLint(\"DefaultLocale\") GeniusSong song = getIntent().getParcelableExtra(String.format(\"outputList song %d\", i+1));\n//                outputList.add(song);\n//            }\n//        }\n        // Obtain the outputList that contains GeniusSongs object\n//        outputList = getIntent().getExtras().getParcelableArrayList(\"outputList\");\n\n        Log.d(\"outputList second song name received\", outputList.get(1).getSongName());\n        Log.d(\"outputList size received\", String.valueOf(outputList.size()));\n        stopService();\n\n        // Create the RecyclerView object and connect with the UI object.\n        RecyclerView recyclerView = findViewById(R.id.libraryRecyclerView);\n\n        ImportResultAdapter adapter = new ImportResultAdapter(this, outputList);\n        adapter.notifyDataSetChanged();\n        recyclerView.setAdapter(adapter);\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\n\n    }\n\n    // Credit: https://youtu.be/FbpD5RZtbCc\n    public void stopService() {\n        Intent serviceIntent = new Intent(this, ImportService.class);\n        stopService(serviceIntent);\n    }\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ActivityImportResult.java b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ActivityImportResult.java
--- a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ActivityImportResult.java	(revision faae7fba23e56ea645202596e48d04ddca17b77e)
+++ b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/ActivityImportResult.java	(date 1682272655144)
@@ -30,25 +30,26 @@
         outputList = new ArrayList<>();
 
         // Obtain the outputList that contains GeniusSongs object
-        int outputListSize = getIntent().getIntExtra("outputList size", 0);
-//        if (outputListSize > 0) {
-//            for (int i = 0; i < outputListSize; i++) {
-//                @SuppressLint("DefaultLocale") GeniusSong song = getIntent().getParcelableExtra(String.format("outputList song %d", i+1));
-//                outputList.add(song);
-//            }
-//        }
+        int outputListSize = getIntent().getExtras().getInt("outputList_size");
+        Log.d("output size in result", String.valueOf(outputListSize));
+        for(int i = 0; i < outputListSize; i ++){
+            String song_name = getIntent().getStringExtra("song_name"+i);
+            String song_artist = getIntent().getStringExtra("song_artist"+i);
+            String song_lyric = getIntent().getStringExtra("song_lyric"+i);
+            GeniusSong newGeniusSong = new GeniusSong(song_name,song_artist,song_lyric);
+            outputList.add(newGeniusSong);
+        }
+
         // Obtain the outputList that contains GeniusSongs object
 //        outputList = getIntent().getExtras().getParcelableArrayList("outputList");
-
-        Log.d("outputList second song name received", outputList.get(1).getSongName());
-        Log.d("outputList size received", String.valueOf(outputList.size()));
         stopService();
 
         // Create the RecyclerView object and connect with the UI object.
         RecyclerView recyclerView = findViewById(R.id.libraryRecyclerView);
-
+        Log.d("---------output song list", String.valueOf(outputList.size()));
         ImportResultAdapter adapter = new ImportResultAdapter(this, outputList);
         adapter.notifyDataSetChanged();
+        Log.d("------adapter list", String.valueOf(adapter.getItemCount()));
         recyclerView.setAdapter(adapter);
         recyclerView.setLayoutManager(new LinearLayoutManager(this));
 
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <targetSelectedWithDropDown>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$USER_HOME$/.android/avd/Pixel_6_API_26.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </targetSelectedWithDropDown>\n    <timeTargetWasSelectedWithDropDown value=\"2023-04-23T04:06:52.344007Z\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision faae7fba23e56ea645202596e48d04ddca17b77e)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1682272173713)
@@ -7,11 +7,11 @@
         <deviceKey>
           <Key>
             <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$USER_HOME$/.android/avd/Pixel_6_API_26.avd" />
+            <value value="$USER_HOME$/.android/avd/Pixel_3_API_29.avd" />
           </Key>
         </deviceKey>
       </Target>
     </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-04-23T04:06:52.344007Z" />
+    <timeTargetWasSelectedWithDropDown value="2023-04-23T17:49:27.429318Z" />
   </component>
 </project>
\ No newline at end of file
