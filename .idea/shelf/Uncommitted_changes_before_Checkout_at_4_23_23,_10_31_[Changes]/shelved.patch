Index: app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LogInActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.northeastern.nucs5520sp_musiclyicsapp.final_project;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.firebase.auth.AuthResult;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseUser;\nimport com.google.firebase.auth.UserProfileChangeRequest;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\n\nimport edu.northeastern.nucs5520sp_musiclyicsapp.R;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.databinding.ActivityLogInBinding;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.UserModel;\n\n/*\nLogin page: for user to login\neditTextUsername: for user to input email\neditTextPassword: for user to input password\nbuttonSubmit: for user to click to verify their account( if user doesn't have an account yet, send a\nwarning that user need to sign up for account.\nbuttonSignup: for user to click to signup an account(if account already signup, send a warning that\nuser need to log in instead\n\n */\npublic class LogInActivity extends AppCompatActivity {\n    ActivityLogInBinding binding;\n    String username, emailString, passwordString;\n    DatabaseReference databaseReference;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = ActivityLogInBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        databaseReference = FirebaseDatabase.getInstance().getReference(\"Final_Project_Users\");\n\n        // log in\n       binding.buttonSubmit.setOnClickListener(new View.OnClickListener() {\n           @Override\n           public void onClick(View v) {\n               emailString = binding.emailAddress.getText().toString();\n               passwordString = binding.password.getText().toString();\n               if(TextUtils.isEmpty(emailString) || TextUtils.isEmpty(passwordString)){\n                   Toast.makeText(LogInActivity.this, \"Email is empty\", Toast.LENGTH_SHORT).show();\n               } else {\n                   login();\n               }\n           }\n       });\n\n       // signUp\n       binding.buttonSignup.setOnClickListener(new View.OnClickListener() {\n           @Override\n           public void onClick(View v) {\n               emailString = binding.emailAddress.getText().toString();\n               username = emailString;\n               passwordString = binding.password.getText().toString();\n               if(TextUtils.isEmpty(emailString) || TextUtils.isEmpty(passwordString)){\n                   Toast.makeText(LogInActivity.this, \"Empty input\", Toast.LENGTH_SHORT).show();\n               } else {\n                   signUp();\n               }\n           }\n       });\n\n    }\n\n    private void login() {\n        Log.d(\"------email: \", emailString);\n        Log.d(\"------password: \", passwordString);\n        FirebaseAuth.getInstance().signInWithEmailAndPassword(emailString.trim(), passwordString).addOnSuccessListener(new OnSuccessListener<AuthResult>() {\n            @Override\n            public void onSuccess(AuthResult authResult) {\n                System.out.println(\"we are in login()'s onSuccess()\");\n                UserProfileChangeRequest userProfileChangeRequest = new UserProfileChangeRequest.Builder().setDisplayName(username).build();\n                FirebaseUser firebaseUser = FirebaseAuth.getInstance().getCurrentUser();\n                firebaseUser.updateProfile(userProfileChangeRequest);\n                Toast.makeText(LogInActivity.this, \"Login successful!\", Toast.LENGTH_SHORT).show();\n                startActivity(new Intent(LogInActivity.this, LibraryPageActivity.class));\n                finish();\n            }\n        }).addOnFailureListener(er -> {\n            Toast.makeText(LogInActivity.this, \"\" + er.getMessage(), Toast.LENGTH_SHORT).show();\n            Log.d(\"login error\", er.getMessage());\n        });\n    }\n\n    // Check if there is a user who already log in when project start\n    @Override\n    protected void onStart() {\n        super.onStart();\n        if(FirebaseAuth.getInstance().getCurrentUser() != null){\n            startActivity(new Intent(LogInActivity.this, LibraryPageActivity.class));\n            finish();\n        }\n    }\n\n    private void signUp() {\n        FirebaseAuth.getInstance().createUserWithEmailAndPassword(emailString.trim(), passwordString)\n                .addOnSuccessListener(new OnSuccessListener<AuthResult>() {\n                    @Override\n                    public void onSuccess(AuthResult authResult) {\n                        UserProfileChangeRequest userProfileChangeRequest = new UserProfileChangeRequest.Builder().setDisplayName(username).build();\n                        FirebaseUser firebaseUser = FirebaseAuth.getInstance().getCurrentUser();\n                        firebaseUser.updateProfile(userProfileChangeRequest);\n                        UserModel user = new UserModel(FirebaseAuth.getInstance().getUid(), username, emailString, passwordString);\n                        databaseReference.child(FirebaseAuth.getInstance().getUid()).setValue(user);\n                        Toast.makeText(LogInActivity.this, \"SignUp successful!\", Toast.LENGTH_SHORT).show();\n\n                        startActivity(new Intent(LogInActivity.this, UserPageActivity.class));\n                        finish();\n                    }\n                }).addOnFailureListener(er -> {\n                    Toast.makeText(LogInActivity.this, \"\" + er.getMessage(), Toast.LENGTH_SHORT).show();\n\n                });\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LogInActivity.java b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LogInActivity.java
--- a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LogInActivity.java	(revision 2655db83c8421a3e91a1bedb3d9c2cbb056a9a0b)
+++ b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LogInActivity.java	(date 1682260002165)
@@ -118,7 +118,7 @@
                         databaseReference.child(FirebaseAuth.getInstance().getUid()).setValue(user);
                         Toast.makeText(LogInActivity.this, "SignUp successful!", Toast.LENGTH_SHORT).show();
 
-                        startActivity(new Intent(LogInActivity.this, UserPageActivity.class));
+                        startActivity(new Intent(LogInActivity.this, LibraryPageActivity.class));
                         finish();
                     }
                 }).addOnFailureListener(er -> {
Index: app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.northeastern.nucs5520sp_musiclyicsapp.final_project;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.content.res.ResourcesCompat;\n\nimport android.content.Intent;\nimport android.graphics.drawable.Drawable;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.text.method.ScrollingMovementMethod;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\n\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.material.snackbar.Snackbar;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseUser;\nimport com.google.firebase.database.DataSnapshot;\nimport com.google.firebase.database.DatabaseError;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\nimport com.google.firebase.database.ValueEventListener;\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.google.firebase.storage.StorageException;\nimport com.google.firebase.storage.StorageReference;\nimport com.squareup.picasso.Picasso;\n\nimport java.util.Properties;\n\nimport edu.northeastern.nucs5520sp_musiclyicsapp.R;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.databinding.ActivityCurrentSongPageBinding;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.SongModel;\n\n/*\nCurrent Song Page: display the current song page which include album image, song title, artist,\nlyric editor, text area where contains lyric of the song, button to like, button to comment, button\nto report, button to translate, button to edit the lyric, button to add to user database, and lastly\nthe nav bar to transit to other page\n */\n\npublic class CurrentSongPageActivity extends AppCompatActivity {\n\n    ActivityCurrentSongPageBinding binding;\n    String songName, songArtist, lyricCreator, lyric, translation, lyricCreatorId;\n    DatabaseReference databaseReferenceUsersLyricsLibrary;\n    DatabaseReference databaseReferenceReport;\n    StorageReference storageReference;\n    // this string is assigned as the node key of each song in db library\n    String songName_artist_node;\n    // check if Add Button is checked\n    Boolean isAdded;\n    String imageUrl;\n\n    DatabaseReference databaseReferenceSongLikes;\n    DatabaseReference databaseReferenceSharedLyrics;\n    DatabaseReference databaseReferenceUser;\n\n    Button currentSong_buttonComment;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = ActivityCurrentSongPageBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        // set the button click jump to comment page\n        currentSong_buttonComment = findViewById(R.id.currentSong_buttonComment);\n\n        // get the song's name/artist/creator infor from the library when user choose a song\n        Intent intent = getIntent();\n        songName = intent.getStringExtra(\"song_name\");\n        songArtist= intent.getStringExtra(\"song_artist\");\n        lyricCreator = intent.getStringExtra(\"lyric_creator\");\n        lyric = intent.getStringExtra(\"lyric\");\n        translation = intent.getStringExtra(\"song_translation\");\n\n        // this string is assigned as the node key of each song in db library\n        songName_artist_node = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\")+songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        databaseReferenceUsersLyricsLibrary = FirebaseDatabase.getInstance().getReference(\"users_Lyrics_Library\").child(FirebaseAuth.getInstance().getUid());\n        databaseReferenceSharedLyrics = FirebaseDatabase.getInstance().getReference(\"shared_Lyrics\");\n\n        // edit Intent: when edit a song lyric, it will send all of information to edit page\n        Intent editIntent = new Intent(CurrentSongPageActivity.this, CreateEditPageActivity.class);\n\n        // make lyric scrolling\n        binding.currentSongTextLyric.setMovementMethod(new ScrollingMovementMethod());\n\n        Log.d(\"------song name: \", songName);\n        binding.currentSongTitle.setText(songName);\n        // auto scrollable\n        binding.currentSongTitle.setSelected(true);\n        binding.currentSongArtist.setText(\"Artist: \" + songArtist);\n        binding.currentSongArtist.setSelected(true);\n        binding.currentSongLyricEditor.setText(\"Lyric Creator: \" + lyricCreator);\n        binding.currentSongLyricEditor.setSelected(true);\n\n        //Log.d(\"-----------lyric:\", lyric);\n        binding.currentSongTextLyric.setText(lyric);\n        // load image from firebase storage\n        String currentUid = FirebaseAuth.getInstance().getCurrentUser().getUid();\n        String fileName = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\") + songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\") + currentUid;\n\n        storageReference = FirebaseStorage.getInstance().getReference(\"images/\" + currentUid).child(fileName);\n\n        storageReference.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\n            @Override\n            public void onSuccess(Uri uri) {\n                imageUrl = uri.toString();\n\n                Picasso.get().load(imageUrl).into(binding.currentSongAlbumImage);\n\n\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception e) {\n                Log.d(\"-----fail to load image\", \"do not find image\");\n                binding.currentSongAlbumImage.setImageResource(R.drawable.edit_image_pic);\n            }\n        });\n\n        // set navbar\n        binding.navBarView.setSelectedItemId(R.id.navBar_currentSong);\n\n        // check if song already in user's library\n        // if already in, then the \"add\" icon will change to \"check\" icon\n        // else, show \"add\" icon\n        // if user enter current page is from library, then need to get song lyrics\n        // if user enter this from search page, then lyrics will get from api\n        databaseReferenceUsersLyricsLibrary.child(songName_artist_node).addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                // if exists\n                if(snapshot.exists()){\n                    Log.d(\"----- exists in database\", \"true\");\n                    changeIconIfAlreadyExists();\n                    // get lyric of this song and update UI\n                    //lyric = snapshot.child(\"song_lyric\").getValue().toString();\n                    translation = snapshot.child(\"song_translation\").getValue().toString();\n//                    //Log.d(\"-----------lyric:\", lyric);\n//                    binding.currentSongTextLyric.setText(lyric);\n                } else {\n                    Log.d(\"----- exists in database\", \"false\");\n                    changeToAddIcon();\n                    // if not exist in user's library, then will show the lyrics from shared_Lyrics\n                    showSharedLyric();\n\n                }\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n\n        // find lyric Creator id\n        databaseReferenceUser = FirebaseDatabase.getInstance().getReference(\"Final_Project_Users\");\n        databaseReferenceUser.addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                for(DataSnapshot dataSnapshot:snapshot.getChildren()){\n                    if (dataSnapshot.child(\"username\").getValue().toString().equals(lyricCreator)){\n                        lyricCreatorId = dataSnapshot.getKey().toString();\n                        Log.d(\"-------lyric creator id\", lyricCreatorId);\n                        saveSongLikeOnDB(dataSnapshot.getKey().toString());\n                        //showSharedLyric(lyricCreatorId);\n                    }\n                }\n\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n\n\n        Intent commentIntent = new Intent(CurrentSongPageActivity.this, CommentActivity.class);\n        currentSong_buttonComment.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                commentIntent.putExtra(\"song_name\",songName);\n                commentIntent.putExtra(\"song_artist\", songArtist);\n                commentIntent.putExtra(\"lyricCreator\", lyricCreator);\n                commentIntent.putExtra(\"song_lyric\", lyric);\n                commentIntent.putExtra(\"song_translation\", translation);\n                commentIntent.putExtra(\"image_url\", imageUrl);\n                commentIntent.putExtra(\"lyricCreatorId\", lyricCreatorId);\n                startActivity(commentIntent);\n            }\n        });\n\n        // edit button in lyric details page will open the Create/Edit page to edit the lyric\n        binding.currentSongButtonEdit.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                editIntent.putExtra(\"song_name\", songName);\n                editIntent.putExtra(\"song_artist\", songArtist);\n                editIntent.putExtra(\"lyricCreator\", lyricCreator);\n                editIntent.putExtra(\"song_lyric\", lyric);\n                editIntent.putExtra(\"song_translation\", translation);\n                editIntent.putExtra(\"image_url\", imageUrl);\n                startActivity(new Intent(editIntent));\n                finish();\n            }\n        });\n\n        // translation Button\n        binding.currentSongButtonTranslate.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if(binding.currentSongTextLyric.getText().toString().equals(lyric)){\n                    binding.currentSongTextLyric.setText(translation);\n                    Drawable drawable = ResourcesCompat.getDrawable(\n                            getResources(),\n                            R.drawable.baseline_translate_24_green,\n                            getTheme()\n                    );\n                    binding.currentSongButtonTranslate.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n                } else if (binding.currentSongTextLyric.getText().toString().equals(translation)){\n                    binding.currentSongTextLyric.setText(lyric);\n                    Drawable drawable = ResourcesCompat.getDrawable(\n                            getResources(),\n                            R.drawable.translate,\n                            getTheme()\n                    );\n                    binding.currentSongButtonTranslate.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n                }\n\n            }\n        });\n\n        // add button action\n        binding.currentSongButtonAddToFav.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if(isAdded){\n                    databaseReferenceUsersLyricsLibrary.child(songName_artist_node).removeValue();\n                    Log.d(\"----button action\", \"removed from library\");\n                    changeToAddIcon();\n                } else {\n                    SongModel song = new SongModel(songName, songArtist,lyric,translation,lyricCreator);\n                    //Log.d(\"-----want added song\", songName + \" \" + songArtist + \" \" + lyric + \" \" + translation + \" \" + lyricCreator);\n                    databaseReferenceUsersLyricsLibrary.child(songName_artist_node).setValue(song);\n                    changeIconIfAlreadyExists();\n                    Log.d(\"-----button action\", \"added to library\");\n                }\n            }\n        });\n\n        // report button\n        binding.currentSongButtonReport.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                databaseReferenceReport = FirebaseDatabase.getInstance().getReference(\"reports\");\n                String fileName = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\") + songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\") + lyricCreatorId;\n                databaseReferenceReport.child(fileName).child(currentUid).setValue(FirebaseAuth.getInstance().getCurrentUser().getEmail());\n                Snackbar snackbar = Snackbar.make(findViewById(R.id.current_song_activity), \"Thank you! We received your report.\", Snackbar.LENGTH_LONG);\n                snackbar.show();\n\n                // send email\n                final String username = FirebaseAuth.getInstance().getCurrentUser().getEmail();\n                final String password =\"\";\n                String messageToSend = \"\";\n                Properties props = new Properties();\n                props.put(\"mail.smtp.auth\", \"true\");\n                props.put(\"mail.smtp.starttls.enable\", \"true\");\n                props.put(\"mail.smtp.host\", \"smtp.gmail.com\");\n                props.put(\"mail.smtp.port\", \"true\");\n\n            }\n        });\n\n        // navigation bar on click action\n        binding.navBarView.setOnItemSelectedListener(item -> {\n            switch (item.getItemId()){\n                case R.id.navBar_library:\n                    startActivity(new Intent(CurrentSongPageActivity.this, LibraryPageActivity.class));\n                    break;\n                case R.id.navBar_user:\n                    startActivity(new Intent(CurrentSongPageActivity.this, UserPageActivity.class));\n                   break;\n            }\n            return true;\n        });\n\n\n\n    }\n\n    private void showSharedLyric() {\n        databaseReferenceUser.addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                for(DataSnapshot dataSnapshot:snapshot.getChildren()){\n                    if (dataSnapshot.child(\"username\").getValue().toString().equals(lyricCreator)){\n                        lyricCreatorId = dataSnapshot.getKey().toString();\n                        Log.d(\"-------lyric creator id\", lyricCreatorId);\n                        //saveSongLikeOnDB(dataSnapshot.getKey().toString());\n                        //showSharedLyric(lyricCreatorId);\n                        String path = songName.replaceAll(\"[^a-zA-Z0-9]\",\"\")+ songArtist.replaceAll(\"[^a-zA-Z0-9]\",\"\")+dataSnapshot.getKey().toString();\n                        databaseReferenceSharedLyrics.child(path).addValueEventListener(new ValueEventListener() {\n                            @Override\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                                if(snapshot.exists()){\n                                    Log.d(\"------exist in shared lyric\", \"Object exists: \" + snapshot.getValue());\n                                    lyric = snapshot.child(\"song_lyric\").getValue().toString();\n                                    translation = snapshot.child(\"song_translation\").getValue().toString();\n                                    binding.currentSongTextLyric.setText(lyric);\n                                } else {\n                                    Log.d(\"------not exist in shared lyric\", \"Object not exists\");\n                                }\n                            }\n\n                            @Override\n                            public void onCancelled(@NonNull DatabaseError error) {\n\n                            }\n                        });\n                    }\n                }\n\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n\n    }\n\n    private void showUserLibraryLyric() {\n\n    }\n\n    private void saveSongLikeOnDB(String lyricCreatorId) {\n        // db like path for song\n        String path = songName.replaceAll(\"[^a-zA-Z0-9]\",\"\")+ songArtist.replaceAll(\"[^a-zA-Z0-9]\",\"\")+lyricCreatorId;\n        //check if current user liked this song lyric\n        databaseReferenceSongLikes = FirebaseDatabase.getInstance().getReference(\"likes\").child(path);\n        String currentUserId = FirebaseAuth.getInstance().getUid();\n\n        // check if user already liked this song\n        final Boolean[] isLiked = {false};\n        databaseReferenceSongLikes.addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                for(DataSnapshot dataSnapshot:snapshot.getChildren()){\n                    if(dataSnapshot.getKey().equals(currentUserId)){\n                         isLiked[0] = true;\n                    }\n                }\n                if(isLiked[0]){\n                    Drawable drawable = ResourcesCompat.getDrawable(\n                            getResources(),\n                            R.drawable.baseline_thumb_up_24_green,\n                            getTheme()\n\n                    );\n                    binding.editPageFullScreenButton1.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n                } else {\n                    Drawable drawable = ResourcesCompat.getDrawable(\n                            getResources(),\n                            R.drawable.like,\n                            getTheme()\n\n                    );\n                    binding.editPageFullScreenButton1.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n                }\n\n                // when click the like button\n                binding.editPageFullScreenButton1.setOnClickListener(new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        if(isLiked[0]){\n                            Drawable drawable = ResourcesCompat.getDrawable(\n                                    getResources(),\n                                    R.drawable.like,\n                                    getTheme()\n\n                            );\n                            binding.editPageFullScreenButton1.setCompoundDrawablesWithIntrinsicBounds(null, null, drawable, null);\n                            databaseReferenceSongLikes.child(currentUserId).removeValue();\n                            isLiked[0] = false;\n                        } else {\n                            Drawable drawable = ResourcesCompat.getDrawable(\n                                    getResources(),\n                                    R.drawable.baseline_thumb_up_24_red,\n                                    getTheme()\n\n                            );\n                            binding.editPageFullScreenButton1.setCompoundDrawablesWithIntrinsicBounds(null, null, drawable, null);\n                            databaseReferenceSongLikes.child(currentUserId).setValue(currentUserId);\n                            isLiked[0] = true;\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n    }\n\n    private void changeToAddIcon() {\n        // android:drawableEnd=\"@drawable/addtofav\"\n        //Button search = (Button) findViewById(R.id.yoursearchbutton);\n        //search.setCompoundDrawablesWithIntrinsicBounds('your_drawable',null,null,null);\n        Drawable drawable = ResourcesCompat.getDrawable(\n                getResources(),\n                R.drawable.addtofav,\n                getTheme()\n        );\n        binding.currentSongButtonAddToFav.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n        isAdded = false;\n    }\n\n    private void changeIconIfAlreadyExists() {\n        // android:drawableEnd=\"@drawable/baseline_playlist_add_check_24\"\n        //Button search = (Button) findViewById(R.id.yoursearchbutton);\n        //search.setCompoundDrawablesWithIntrinsicBounds('your_drawable',null,null,null);\n        Drawable drawable = ResourcesCompat.getDrawable(\n                getResources(),\n                R.drawable.baseline_check_circle_outline_24,\n                getTheme()\n        );\n        binding.currentSongButtonAddToFav.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n        isAdded = true;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java
--- a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java	(revision 2655db83c8421a3e91a1bedb3d9c2cbb056a9a0b)
+++ b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java	(date 1682260044128)
@@ -1,16 +1,22 @@
 package edu.northeastern.nucs5520sp_musiclyicsapp.final_project;
 
 import androidx.annotation.NonNull;
+import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.content.res.ResourcesCompat;
 
+import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.PersistableBundle;
 import android.text.method.ScrollingMovementMethod;
 import android.util.Log;
+import android.view.Gravity;
 import android.view.View;
+import android.view.WindowManager;
 import android.widget.Button;
 import android.widget.ImageView;
 import android.widget.TextView;
@@ -46,7 +52,6 @@
  */
 
 public class CurrentSongPageActivity extends AppCompatActivity {
-
     ActivityCurrentSongPageBinding binding;
     String songName, songArtist, lyricCreator, lyric, translation, lyricCreatorId;
     DatabaseReference databaseReferenceUsersLyricsLibrary;
@@ -73,13 +78,36 @@
         // set the button click jump to comment page
         currentSong_buttonComment = findViewById(R.id.currentSong_buttonComment);
 
-        // get the song's name/artist/creator infor from the library when user choose a song
-        Intent intent = getIntent();
-        songName = intent.getStringExtra("song_name");
-        songArtist= intent.getStringExtra("song_artist");
-        lyricCreator = intent.getStringExtra("lyric_creator");
-        lyric = intent.getStringExtra("lyric");
-        translation = intent.getStringExtra("song_translation");
+        SharedPreferences sharedPreferencesCurrentSong = CurrentSongPageActivity.this.getSharedPreferences("CURRENT_SONG", 0);
+        Log.d("--------shared preference contains key", String.valueOf(sharedPreferencesCurrentSong.contains("song_name")));
+        // check if the shared preference is empty when user first login, the current song will not available to show
+        if(!sharedPreferencesCurrentSong.contains("song_name")) {
+            AlertDialog.Builder builder = new AlertDialog.Builder(CurrentSongPageActivity.this);
+            builder.setTitle("Please Choose a Song Lyric")
+                    .setMessage("You have not choose a song lyric yet, Please go to your Library.")
+                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            // Click listener for the "OK" button on the dialog
+                            // Navigate to library activity
+                            Intent intent = new Intent(CurrentSongPageActivity.this, LibraryPageActivity.class);
+                            startActivity(intent);
+                        }
+                    });
+            AlertDialog dialog = builder.create();
+            dialog.show();
+            // Set the dialog's gravity to center
+            WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
+            lp.copyFrom(dialog.getWindow().getAttributes());
+            lp.gravity = Gravity.CENTER;
+            dialog.getWindow().setAttributes(lp);
+        }
+
+        songName = sharedPreferencesCurrentSong.getString("song_name", "");
+        songArtist = sharedPreferencesCurrentSong.getString("song_artist", "");
+        lyricCreator = sharedPreferencesCurrentSong.getString("lyric_creator", "");
+        lyric = sharedPreferencesCurrentSong.getString("lyric", "");
+        translation = sharedPreferencesCurrentSong.getString("song_translation", "");
 
         // this string is assigned as the node key of each song in db library
         songName_artist_node = songName.replaceAll("[^a-zA-Z0-9]", "")+songArtist.replaceAll("[^a-zA-Z0-9]", "");
@@ -143,8 +171,9 @@
                     changeIconIfAlreadyExists();
                     // get lyric of this song and update UI
                     //lyric = snapshot.child("song_lyric").getValue().toString();
-                    translation = snapshot.child("song_translation").getValue().toString();
-//                    //Log.d("-----------lyric:", lyric);
+//                    translation = snapshot.child("song_translation").getValue().toString();
+//                    Log.d("-----translation", snapshot.child("song_translation").getValue().toString());
+                    //Log.d("-----------lyric:", lyric);
 //                    binding.currentSongTextLyric.setText(lyric);
                 } else {
                     Log.d("----- exists in database", "false");
@@ -210,7 +239,6 @@
                 editIntent.putExtra("song_translation", translation);
                 editIntent.putExtra("image_url", imageUrl);
                 startActivity(new Intent(editIntent));
-                finish();
             }
         });
 
@@ -267,16 +295,6 @@
                 Snackbar snackbar = Snackbar.make(findViewById(R.id.current_song_activity), "Thank you! We received your report.", Snackbar.LENGTH_LONG);
                 snackbar.show();
 
-                // send email
-                final String username = FirebaseAuth.getInstance().getCurrentUser().getEmail();
-                final String password ="";
-                String messageToSend = "";
-                Properties props = new Properties();
-                props.put("mail.smtp.auth", "true");
-                props.put("mail.smtp.starttls.enable", "true");
-                props.put("mail.smtp.host", "smtp.gmail.com");
-                props.put("mail.smtp.port", "true");
-
             }
         });
 
@@ -339,8 +357,11 @@
 
     }
 
-    private void showUserLibraryLyric() {
 
+    @Override
+    protected void onResume() {
+        super.onResume();
+        binding.navBarView.setSelectedItemId(R.id.navBar_currentSong);
     }
 
     private void saveSongLikeOnDB(String lyricCreatorId) {
