Index: app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CommentActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.northeastern.nucs5520sp_musiclyicsapp.final_project;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.Toast;\n\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.database.DataSnapshot;\nimport com.google.firebase.database.DatabaseError;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\nimport com.google.firebase.database.ValueEventListener;\n\nimport java.util.Objects;\nimport java.util.UUID;\n\nimport edu.northeastern.nucs5520sp_musiclyicsapp.R;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.databinding.ActivityCommentBinding;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.databinding.ActivityLibraryPageBinding;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.adapters.CommentAdapter;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.CommentModel;\n\npublic class CommentActivity extends AppCompatActivity {\n\n    ActivityCommentBinding binding;\n    CommentAdapter commentAdapter;\n\n    String songName;\n    String songArtist;\n    String lyricCreator;\n    String lyricCreatorId;\n    String lyric, translation,imageUrl;\n    DatabaseReference databaseReferenceSongComment;\n    String commentId, username, userId, context;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = ActivityCommentBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        // this intent for receive the edit action from the lyric detail page\n        Intent intent = getIntent();\n        songName = intent.getStringExtra(\"song_name\");\n        songArtist= intent.getStringExtra(\"song_artist\");\n        lyricCreator = intent.getStringExtra(\"lyricCreator\");\n        lyric = intent.getStringExtra(\"song_lyric\");\n        translation = intent.getStringExtra(\"song_translation\");\n        imageUrl = intent.getStringExtra(\"image_url\");\n        lyricCreatorId = intent.getStringExtra(\"lyricCreatorId\");\n\n        databaseReferenceSongComment = FirebaseDatabase.getInstance().getReference(\"comments\");\n\n        showSongComments(lyricCreatorId);\n        setLyricsLikeNumIntoUI(lyricCreatorId);\n\n        // set Comments recycler view\n        commentAdapter = new CommentAdapter(this);\n        binding.commentList.setAdapter(commentAdapter);\n        binding.commentList.setLayoutManager(new LinearLayoutManager(CommentActivity.this));\n\n        binding.buttonPostComment.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                commentId = UUID.randomUUID().toString();\n                username = FirebaseAuth.getInstance().getCurrentUser().getEmail();\n                userId = FirebaseAuth.getInstance().getCurrentUser().getUid();\n                context = binding.commentContext.getText().toString();\n                // if user comment a lyric which created by genius\n                String s;\n                if(lyricCreator.toLowerCase().equals(\"genius\")){\n                    s = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\") + songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\")+ \"genius\";\n                } else {\n                    s = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\") + songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\")+ lyricCreatorId;\n                }\n                CommentModel new_comment = new CommentModel(s, commentId, username, userId,context);\n                if(!Objects.equals(context, \"\")){\n                    databaseReferenceSongComment.child(s).child(commentId).setValue(new_comment);\n                    Toast.makeText(CommentActivity.this, \"Post Comment Successful\", Toast.LENGTH_SHORT).show();\n                    binding.commentContext.setText(\"\");\n                } else {\n                    Toast.makeText(CommentActivity.this, \"Empty comment\", Toast.LENGTH_SHORT).show();\n                }\n\n            }\n        });\n\n        binding.buttonCommentBack.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent backCurrentSongIntent = new Intent(CommentActivity.this, CurrentSongPageActivity.class);\n                backCurrentSongIntent.putExtra(\"song_name\",songName);\n                backCurrentSongIntent.putExtra(\"song_artist\", songArtist);\n                backCurrentSongIntent.putExtra(\"lyric_creator\", lyricCreator);\n\n                startActivity(backCurrentSongIntent);\n            }\n        });\n\n        // sort spinner select action\n        binding.sortSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n            @Override\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n                // Get the selected item from the Spinner\n                String selectedItem = parent.getItemAtPosition(position).toString();\n                if(selectedItem.equals(\"Sort by Newest\")){\n                    Log.d(\"-------nothing selected\", \"Newest\");\n                    commentAdapter.sortItemsByNewest();\n                } else if(selectedItem.equals(\"Sort By Earliest\")){\n                    commentAdapter.sortItemsByOldest();\n                }\n//                else if(selectedItem.equals(\"Sort by Popularity\")){\n//                    Log.d(\"-------selected\", \"Popularity\");\n//                    commentAdapter.sortItemsByLikes();\n//                }\n//                else if(selectedItem.equals(\"Sort By Dislike\")){\n//                    commentAdapter.sortItemsByDislikes();\n//                }\n\n            }\n\n            @Override\n            public void onNothingSelected(AdapterView<?> parent) {\n                Log.d(\"-------nothing selected\", \"nothing selected of spinner\");\n\n            }\n        });\n\n    }\n\n    private void setLyricsLikeNumIntoUI(String creatorId) {\n        String path = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\") + songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\")+ creatorId;\n        DatabaseReference databaseReferenceSongLike = FirebaseDatabase.getInstance().getReference(\"likes\").child(path);\n        databaseReferenceSongLike.addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n\n                Log.d(\"-----------children count\", String.valueOf(snapshot.getChildrenCount()));\n                binding.likesCount.setText(\"( \" + snapshot.getChildrenCount() + \" )\" );\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n    }\n\n    private void showSongComments(String creatorId) {\n        String s;\n        if(lyricCreator.toLowerCase().equals(\"genius\")){\n            s = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\") + songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\")+ \"genius\";\n        } else {\n            s = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\") + songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\")+ creatorId;\n        }\n        databaseReferenceSongComment.child(s).addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                Log.d(\"---------show\", s);\n                commentAdapter.clear();\n                for(DataSnapshot dataSnapshot:snapshot.getChildren()){\n                    String commentId = dataSnapshot.child(\"commentId\").getValue().toString();\n                    String username = dataSnapshot.child(\"username\").getValue().toString();\n                    String commentUserId = dataSnapshot.child(\"userId\").getValue().toString();\n                    String commentContext = dataSnapshot.child(\"context\").getValue().toString();\n                    String currentDateTime = dataSnapshot.child(\"currentDate\").getValue().toString();\n                    String numLike = dataSnapshot.child(\"num_like\").getValue().toString();\n                    String numDislike = dataSnapshot.child(\"num_dislike\").getValue().toString();\n                    CommentModel comment = new CommentModel(s, commentId,username, commentUserId,commentContext, Integer.parseInt(numDislike),Integer.parseInt(numLike),currentDateTime);\n                    Log.d(\"-----in show adapter\", username);\n                    commentAdapter.add(comment);\n                }\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CommentActivity.java b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CommentActivity.java
--- a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CommentActivity.java	(revision 82dbe2c502ff106e6fbba7e4f5ab9714d66c2eb3)
+++ b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CommentActivity.java	(date 1681947294290)
@@ -76,7 +76,7 @@
                 context = binding.commentContext.getText().toString();
                 // if user comment a lyric which created by genius
                 String s;
-                if(lyricCreator.toLowerCase().equals("genius")){
+                if(lyricCreator.toLowerCase().equals("Genius")){
                     s = songName.replaceAll("[^a-zA-Z0-9]", "") + songArtist.replaceAll("[^a-zA-Z0-9]", "")+ "genius";
                 } else {
                     s = songName.replaceAll("[^a-zA-Z0-9]", "") + songArtist.replaceAll("[^a-zA-Z0-9]", "")+ lyricCreatorId;
@@ -156,7 +156,7 @@
 
     private void showSongComments(String creatorId) {
         String s;
-        if(lyricCreator.toLowerCase().equals("genius")){
+        if(lyricCreator.toLowerCase().equals("Genius")){
             s = songName.replaceAll("[^a-zA-Z0-9]", "") + songArtist.replaceAll("[^a-zA-Z0-9]", "")+ "genius";
         } else {
             s = songName.replaceAll("[^a-zA-Z0-9]", "") + songArtist.replaceAll("[^a-zA-Z0-9]", "")+ creatorId;
Index: app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/SearchActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.northeastern.nucs5520sp_musiclyicsapp.final_project;\n\nimport static edu.northeastern.nucs5520sp_musiclyicsapp.R.id.local_search_toggle;\nimport static edu.northeastern.nucs5520sp_musiclyicsapp.R.id.online_search_toggle;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\n\nimport android.content.Intent;\nimport android.media.ToneGenerator;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.CompoundButton;\nimport android.widget.Toast;\nimport android.widget.ToggleButton;\n\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.database.DataSnapshot;\nimport com.google.firebase.database.DatabaseError;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\nimport com.google.firebase.database.ValueEventListener;\n\nimport edu.northeastern.nucs5520sp_musiclyicsapp.R;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.databinding.ActivitySearchBinding;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.adapters.LibraryAdapter;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.SongModel;\n\npublic class SearchActivity extends AppCompatActivity {\n    ActivitySearchBinding binding;\n    LibraryAdapter libraryAdapter;\n    DatabaseReference databaseReferenceUserLibrary;\n    DatabaseReference databaseReferenceSharedLibrary;\n\n\n    // set the local and online togglebutton\n    private ToggleButton localSearchToggle;\n    private ToggleButton onlineSearchToggle;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = ActivitySearchBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        // set adapter for showing the search result in recycler view\n        libraryAdapter = new LibraryAdapter(this);\n        binding.searchHistoryRecyclerview.setAdapter(libraryAdapter);\n        binding.searchHistoryRecyclerview.setLayoutManager(new LinearLayoutManager(SearchActivity.this));\n\n        //database reference\n        databaseReferenceUserLibrary = FirebaseDatabase.getInstance().getReference(\"users_Lyrics_Library\").child(FirebaseAuth.getInstance().getUid());\n        databaseReferenceSharedLibrary = FirebaseDatabase.getInstance().getReference(\"shared_Lyrics\");\n\n        // change the name of myToggleButton into localSearchToggle\n//        ToggleButton myToggleButton = findViewById(local_search_toggle);\n\n//        Log.d(\"-----if local button checked\", String.valueOf(binding.localSearchToggle.isChecked()));\n        localSearchToggle = findViewById(local_search_toggle);\n        onlineSearchToggle = findViewById(online_search_toggle);\n\n        localSearchToggle.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n                // Handle the toggle state change here\n                if (isChecked) {\n                    // The toggle button is on\n                    onlineSearchToggle.setChecked(false);\n                } else {\n                    // The toggle button is off\n                    localSearchToggle.setChecked(false);\n                    onlineSearchToggle.setChecked(true);\n                }\n            }\n        });\n\n        onlineSearchToggle.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {\n            @Override\n            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n                if (isChecked) {\n                    localSearchToggle.setChecked(false);\n                } else {\n                    localSearchToggle.setChecked(true);\n                    onlineSearchToggle.setChecked(false);\n                }\n            }\n        });\n\n        // when local search button clicked, then click Search button, it will search users' library song\n        // else, when online search button clicked, then click Search button, it will search\n        // users' shared song in firebase realtime db and\n        // lyrics from API\n        binding.floatingActionButtonSearchButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                String search_inputText = binding.searchEdittext.getText().toString();\n                if(search_inputText.isEmpty()){\n                    Toast.makeText(SearchActivity.this, \"Search Empty\", Toast.LENGTH_SHORT).show();\n                } else{\n                    if(binding.localSearchToggle.isChecked()) {\n                        Log.d(\"-------local search\", String.valueOf(binding.localSearchToggle.isChecked()));\n                        Log.d(\"-----input search\", search_inputText);\n                        databaseReferenceUserLibrary.addValueEventListener(new ValueEventListener() {\n                            @Override\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                                libraryAdapter.clear();\n                                Log.d(\"------snapshot.getChildren\", String.valueOf(snapshot.getChildrenCount()));\n                                for (DataSnapshot dataSnapshot : snapshot.getChildren()) {\n                                    if (dataSnapshot.child(\"song_name\").getValue().toString().toLowerCase().contains(search_inputText.toLowerCase())) {\n                                        String song_name = dataSnapshot.child(\"song_name\").getValue().toString();\n                                        String song_artist = dataSnapshot.child(\"song_artist\").getValue().toString();\n                                        String lyric_creator = dataSnapshot.child(\"lyric_creator\").getValue().toString();\n                                        String song_lyric = dataSnapshot.child(\"song_lyric\").getValue().toString();\n                                        String song_translation = dataSnapshot.child(\"song_translation\").getValue().toString();\n                                        SongModel song = new SongModel(song_name, song_artist, song_lyric, song_translation, lyric_creator);\n                                        libraryAdapter.add(song);\n                                    }\n                                }\n                            }\n\n                            @Override\n                            public void onCancelled(@NonNull DatabaseError error) {\n\n                            }\n                        });\n                    } else if(binding.onlineSearchToggle.isChecked()){\n                        Log.d(\"--------online search\", String.valueOf(binding.onlineSearchToggle.isChecked()));\n                        // search from shared lyric in firebase realtime db\n                        databaseReferenceSharedLibrary.addValueEventListener(new ValueEventListener() {\n                            @Override\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                                libraryAdapter.clear();\n                                for (DataSnapshot dataSnapshot: snapshot.getChildren()){\n                                    if(dataSnapshot.child(\"song_name\").getValue().toString().toLowerCase().contains(search_inputText.toLowerCase())){\n                                        String song_name = dataSnapshot.child(\"song_name\").getValue().toString();\n                                        String song_artist = dataSnapshot.child(\"song_artist\").getValue().toString();\n                                        String lyric_creator = dataSnapshot.child(\"lyric_creator\").getValue().toString();\n                                        String song_lyric = dataSnapshot.child(\"song_lyric\").getValue().toString();\n                                        String song_translation = dataSnapshot.child(\"song_translation\").getValue().toString();\n                                        SongModel song = new SongModel(song_name,song_artist,song_lyric,song_translation,lyric_creator);\n                                        libraryAdapter.add(song);\n                                    }\n                                }\n                            }\n\n                            @Override\n                            public void onCancelled(@NonNull DatabaseError error) {\n\n                            }\n                        });\n\n                        // search from API\n                    }\n                }\n            }\n        });\n\n\n        // navBar click action\n        binding.navBarView.setOnItemSelectedListener(item -> {\n            switch (item.getItemId()){\n                case R.id.navBar_library:\n                    startActivity(new Intent(SearchActivity.this, LibraryPageActivity.class));\n                    break;\n                case R.id.navBar_user:\n                    startActivity(new Intent(SearchActivity.this, UserPageActivity.class));\n                    break;\n            }\n            return true;\n        });\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/SearchActivity.java b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/SearchActivity.java
--- a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/SearchActivity.java	(revision 82dbe2c502ff106e6fbba7e4f5ab9714d66c2eb3)
+++ b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/SearchActivity.java	(date 1681956193854)
@@ -26,6 +26,7 @@
 import edu.northeastern.nucs5520sp_musiclyicsapp.R;
 import edu.northeastern.nucs5520sp_musiclyicsapp.databinding.ActivitySearchBinding;
 import edu.northeastern.nucs5520sp_musiclyicsapp.final_project.adapters.LibraryAdapter;
+import edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.GeniusSong;
 import edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.SongModel;
 
 public class SearchActivity extends AppCompatActivity {
@@ -33,6 +34,8 @@
     LibraryAdapter libraryAdapter;
     DatabaseReference databaseReferenceUserLibrary;
     DatabaseReference databaseReferenceSharedLibrary;
+    LyricsService lyricsService;
+
 
 
     // set the local and online togglebutton
@@ -45,6 +48,8 @@
         binding = ActivitySearchBinding.inflate(getLayoutInflater());
         setContentView(binding.getRoot());
 
+        lyricsService = new LyricsService(getApplicationContext());
+
         // set adapter for showing the search result in recycler view
         libraryAdapter = new LibraryAdapter(this);
         binding.searchHistoryRecyclerview.setAdapter(libraryAdapter);
@@ -95,7 +100,7 @@
         binding.floatingActionButtonSearchButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                String search_inputText = binding.searchEdittext.getText().toString();
+                String search_inputText = binding.searchEdittext.getText().toString().trim();
                 if(search_inputText.isEmpty()){
                     Toast.makeText(SearchActivity.this, "Search Empty", Toast.LENGTH_SHORT).show();
                 } else{
@@ -125,6 +130,9 @@
 
                             }
                         });
+                        if (libraryAdapter.getSize() == 0){
+                            Toast.makeText(SearchActivity.this, "No result found in your library", Toast.LENGTH_LONG).show();
+                        }
                     } else if(binding.onlineSearchToggle.isChecked()){
                         Log.d("--------online search", String.valueOf(binding.onlineSearchToggle.isChecked()));
                         // search from shared lyric in firebase realtime db
@@ -152,6 +160,27 @@
                         });
 
                         // search from API
+                        lyricsService.getLyricsForSearch(search_inputText, new VolleyCallback() {
+                            @Override
+                            public void onSuccess(boolean finished) {
+
+                            }
+
+                            @Override
+                            public void onLyricsSuccess(GeniusSong outputGeniusSong) {
+                                    SongModel song = new SongModel(outputGeniusSong.getSongName(), outputGeniusSong.getArtistsList().get(0), outputGeniusSong.getLyrics(),"", "Genius");
+                                    if (!song.getSong_lyric().equals("")) {
+                                        libraryAdapter.add(song);
+                                    }
+
+
+                            }
+                        });
+
+                        if(libraryAdapter.getSize() == 0){
+                            Toast.makeText(SearchActivity.this, "No result found in shared lyrics or outside resource", Toast.LENGTH_LONG).show();
+                        }
+
                     }
                 }
             }
Index: app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/adapters/LibraryAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.northeastern.nucs5520sp_musiclyicsapp.final_project.adapters;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport edu.northeastern.nucs5520sp_musiclyicsapp.R;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.CurrentSongPageActivity;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.SongModel;\n\npublic class LibraryAdapter extends RecyclerView.Adapter<LibraryAdapter.MyViewHolder> {\n    private Context context;\n    private List<SongModel> songList;\n\n    public LibraryAdapter(Context context){\n        this.context = context;\n        songList = new ArrayList<>();\n    }\n\n    public void add(SongModel song){\n        songList.add(song);\n        notifyDataSetChanged();\n    }\n\n    public void clear(){\n        songList.clear();\n        notifyDataSetChanged();\n    }\n\n    public List<SongModel> getSongList(){\n        return songList;\n    }\n\n    @NonNull\n    @Override\n    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.library_card_design, parent, false);\n        return new MyViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {\n        SongModel song = songList.get(position);\n        holder.song_name.setText(song.getSong_name());\n        holder.song_artist.setText(\"Artist: \" + song.getSong_artist());\n        holder.lyric_creator.setText(\"Lyric Creator: \" + song.getLyric_creator());\n\n        Intent intent = new Intent(context, CurrentSongPageActivity.class);\n        intent.putExtra(\"song_name\", song.getSong_name());\n        intent.putExtra(\"song_artist\", song.getSong_artist());\n        intent.putExtra(\"lyric_creator\", song.getLyric_creator());\n        holder.itemView.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                context.startActivities(new Intent[]{intent});\n            }\n        });\n\n\n\n    }\n\n    @Override\n    public int getItemCount() {\n        return songList.size();\n    }\n\n    public class MyViewHolder extends RecyclerView.ViewHolder{\n        private TextView song_name;\n        private TextView song_artist;\n        private TextView lyric_creator;\n\n        //private Button sendStickerButton;\n\n        public MyViewHolder(@NonNull View itemView) {\n            super(itemView);\n            song_name = itemView.findViewById(R.id.library_songTitle);\n            song_artist = itemView.findViewById(R.id.library_artist);\n            lyric_creator = itemView.findViewById(R.id.library_lyricEditor);\n        }\n\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/adapters/LibraryAdapter.java b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/adapters/LibraryAdapter.java
--- a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/adapters/LibraryAdapter.java	(revision 82dbe2c502ff106e6fbba7e4f5ab9714d66c2eb3)
+++ b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/adapters/LibraryAdapter.java	(date 1681955953341)
@@ -37,6 +37,10 @@
         notifyDataSetChanged();
     }
 
+    public int getSize(){
+        return songList.size();
+    }
+
     public List<SongModel> getSongList(){
         return songList;
     }
@@ -59,6 +63,8 @@
         intent.putExtra("song_name", song.getSong_name());
         intent.putExtra("song_artist", song.getSong_artist());
         intent.putExtra("lyric_creator", song.getLyric_creator());
+        intent.putExtra("song_translation", song.getSong_translation());
+        intent.putExtra("lyric", song.getSong_lyric());
         holder.itemView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
Index: app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LyricsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.northeastern.nucs5520sp_musiclyicsapp.final_project;\n\nimport android.content.Context;\nimport android.util.Log;\n\nimport com.android.volley.Request;\nimport com.android.volley.RequestQueue;\nimport com.android.volley.ServerError;\nimport com.android.volley.toolbox.JsonObjectRequest;\nimport com.android.volley.toolbox.Volley;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.jsoup.Connection;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.GeniusSong;\n\npublic class LyricsService {\n\n    private final RequestQueue queue;\n    private String GENIUS_ACCESS_TOKEN = \"dmSrz_BbuyZziOaxUKrx56UQdH3dwWuPm4h4YC0RLFtT20ZjnB0GiOwtq4Wo3TYs\";\n    private GeniusSong outputSong;\n\n    public LyricsService(Context context) {\n        queue = Volley.newRequestQueue(context);\n    }\n\n    public GeniusSong getOutputSong() {\n        return this.outputSong;\n    }\n\n    public void getLyricsForSong(String songName, ArrayList<String> artistsList, VolleyCallback callback) {\n\n        String cleanedSongName = songName.replaceAll(\"[^a-zA-Z\\\\s]\", \"\");\n        String artistsLongString = String.join(\" \", artistsList);\n        artistsLongString = artistsLongString.replaceAll(\"[^a-zA-Z\\\\s]\", \"\");\n\n        // Build the API link. Remove white spaces at then ends of endpoint and replace white\n        // spaces with %20.\n        String endpoint = \"https://api.genius.com/search?q=\" + cleanedSongName + artistsLongString;\n        endpoint = endpoint.trim();\n        endpoint = endpoint.replace(\" \", \"%20\");\n\n        Log.d(\"LYRICS URL\", endpoint);\n\n        // Create the request.\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest\n                (Request.Method.GET, endpoint, null, response -> {\n//                    JSONArray songsJsonArray = response.optJSONObject(\"response\").optJSONArray(\"hits\");\n                    JSONArray songsJsonArray = response.optJSONObject(\"response\").optJSONArray(\"hits\");\n                    // Logging\n                    for(int i = 0; i < songsJsonArray.length(); i++) {\n                        try {\n                            Log.d(\"GENIUS JSONARRAY HITS\", songsJsonArray.get(i).toString());\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    // We choose the first song among all songs returned from the search, if\n                    // the search result is not empty.\n                    String lyrics = \"\";\n                    Log.d(\"INSIDE GENIUS REQUEST\", \"inside genius request\");\n                    if (songsJsonArray != null) {\n                        Log.d(\"INSIDE songJsonArray\", \"inside songJsonArray\");\n                        // Url is buried inside the first JSONObject (i.e., first search result),\n                        // inside its \"result\" key, whose value is also a JSONObject. Inside this\n                        // JSONObject there is a \"url\" key.\n                        JSONObject topSong = songsJsonArray.optJSONObject(0);\n                        JSONObject topSongDetails = topSong.optJSONObject(\"result\");\n                        assert topSongDetails != null;\n                        String lyricsUrl = topSongDetails.optString(\"url\");\n                        Log.d(\"TOPSONGDETAILS JSONOBJECT\", topSongDetails.toString());\n                        Log.d(\"LYRICSURL FROM JSON\", lyricsUrl);\n                        GetLyricsRunnable getLyricsRunnable = new GetLyricsRunnable(songName, artistsList, lyricsUrl);\n                        Thread t = new Thread(getLyricsRunnable);\n                        t.start();\n                        // Wait until the new thread has run the GetLyricsRunnable.\n                        try {\n                            t.join();\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                        // After the GetLyricsRunnable finished running, we can finally get the final\n                        // output with lyrics (if result found on Genius.com).\n                        GeniusSong outputGeniusSong = getLyricsRunnable.getGeniusSong();\n                        // Send the output out with callback function.\n                        callback.onLyricsSuccess(outputGeniusSong);\n                        Log.d(\"genius song after thread run\", outputGeniusSong.getSongName());\n                        Log.d(\"genius song lyrics after thread run\", outputGeniusSong.getLyrics());\n\n\n                        // This will lead us into the new Runnable thread to scrape lyrics from Genius.\n                    }\n                }, error -> {\n                    Log.e(\"ERROR\", \"Error when trying to get lyrics from Genius.\");\n                    if (error instanceof ServerError && error.networkResponse != null) {\n                        int statusCode = error.networkResponse.statusCode;\n                        if (statusCode == 401) {\n                            Log.e(\"ERROR\", \"Genius Unauthorized\");\n                        }\n                        else if (statusCode == 403) {\n                            Log.e(\"ERROR\", \"Genius request has been refused\");\n                        }\n                        else if (statusCode == 404) {\n                            Log.e(\"ERROR\", \"Genius request not found\");\n                        }\n                        else if (statusCode == 429) {\n                            Log.e(\"ERROR\", \"Genius request rate limit reached\");\n                        }\n                        else if (statusCode == 500) {\n                            Log.e(\"ERROR\", \"Genius API side error\");\n                        }\n                    }\n                }) {\n            @Override\n            public Map<String, String> getHeaders() {\n                Map<String, String> headers = new HashMap<>();\n                String token = GENIUS_ACCESS_TOKEN;\n                String auth = \"Bearer \" + token;\n                headers.put(\"Authorization\", auth);\n                return headers;\n            }\n        };\n        queue.add(jsonObjectRequest);\n    }\n\n    public void getLyricsForSearch(String searchTerm, VolleyCallback callback) {\n\n        String cleanedSearchTerm = searchTerm.replaceAll(\"[^a-zA-Z\\\\s]\", \"\");\n\n        // Build the API link. Remove white spaces at then ends of endpoint and replace white\n        // spaces with %20.\n        String endpoint = \"https://api.genius.com/search?q=\" + cleanedSearchTerm;\n        endpoint = endpoint.trim();\n        endpoint = endpoint.replace(\" \", \"%20\");\n\n        Log.d(\"LYRICS URL\", endpoint);\n\n        // Create the request.\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest\n                (Request.Method.GET, endpoint, null, response -> {\n//                    JSONArray songsJsonArray = response.optJSONObject(\"response\").optJSONArray(\"hits\");\n                    JSONArray songsJsonArray = response.optJSONObject(\"response\").optJSONArray(\"hits\");\n                    // Logging\n                    for(int i = 0; i < songsJsonArray.length(); i++) {\n                        try {\n                            Log.d(\"GENIUS JSONARRAY HITS\", songsJsonArray.get(i).toString());\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                    // We choose the first song among all songs returned from the search, if\n                    // the search result is not empty.\n                    String lyrics = \"\";\n                    Log.d(\"INSIDE GENIUS REQUEST\", \"inside genius request\");\n                    if (songsJsonArray != null) {\n                        Log.d(\"INSIDE songJsonArray\", \"inside songJsonArray\");\n                        // Url is buried inside the first JSONObject (i.e., first search result),\n                        // inside its \"result\" key, whose value is also a JSONObject. Inside this\n                        // JSONObject there is a \"url\" key.\n                        JSONObject topSong = songsJsonArray.optJSONObject(0);\n                        JSONObject topSongDetails = topSong.optJSONObject(\"result\");\n                        assert topSongDetails != null;\n                        String lyricsUrl = topSongDetails.optString(\"url\");\n                        String songName = topSongDetails.optString(\"full_title\");\n                        String artistNames = topSongDetails.optString(\"artist_names\");\n                        // Clean up song name to remove \"by xxx\" at the end, i.e. artist_names.\n                        if (songName.endsWith(artistNames)) {\n                            String actualSongNameBy = songName.substring(0, songName.length() - artistNames.length()).trim();\n                            if (actualSongNameBy.endsWith(\"by\")) {\n                                songName = actualSongNameBy.substring(0, actualSongNameBy.length() - 2).trim();\n                            }\n                        }\n                        ArrayList<String> artistsList = new ArrayList<>();\n                        artistsList.add(artistNames);\n                        Log.d(\"TOPSONGDETAILS JSONOBJECT\", topSongDetails.toString());\n                        Log.d(\"LYRICSURL FROM JSON\", lyricsUrl);\n                        GetLyricsRunnable getLyricsRunnable = new GetLyricsRunnable(songName, artistsList, lyricsUrl);\n                        Thread t = new Thread(getLyricsRunnable);\n                        t.start();\n                        // Wait until the new thread has run the GetLyricsRunnable.\n                        try {\n                            t.join();\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                        // After the GetLyricsRunnable finished running, we can finally get the final\n                        // output with lyrics (if result found on Genius.com).\n                        GeniusSong outputGeniusSong = getLyricsRunnable.getGeniusSong();\n                        // Send the output out with callback function.\n                        callback.onLyricsSuccess(outputGeniusSong);\n                        Log.d(\"genius song after thread run\", outputGeniusSong.getSongName());\n                        Log.d(\"genius song lyrics after thread run\", outputGeniusSong.getLyrics());\n\n\n                        // This will lead us into the new Runnable thread to scrape lyrics from Genius.\n                    }\n                }, error -> {\n                    Log.e(\"ERROR\", \"Error when trying to get lyrics from Genius.\");\n                    if (error instanceof ServerError && error.networkResponse != null) {\n                        int statusCode = error.networkResponse.statusCode;\n                        if (statusCode == 401) {\n                            Log.e(\"ERROR\", \"Genius Unauthorized\");\n                        }\n                        else if (statusCode == 403) {\n                            Log.e(\"ERROR\", \"Genius request has been refused\");\n                        }\n                        else if (statusCode == 404) {\n                            Log.e(\"ERROR\", \"Genius request not found\");\n                        }\n                        else if (statusCode == 429) {\n                            Log.e(\"ERROR\", \"Genius request rate limit reached\");\n                        }\n                        else if (statusCode == 500) {\n                            Log.e(\"ERROR\", \"Genius API side error\");\n                        }\n                    }\n                }) {\n            @Override\n            public Map<String, String> getHeaders() {\n                Map<String, String> headers = new HashMap<>();\n                String token = GENIUS_ACCESS_TOKEN;\n                String auth = \"Bearer \" + token;\n                headers.put(\"Authorization\", auth);\n                return headers;\n            }\n        };\n\n        queue.add(jsonObjectRequest);\n\n    }\n\n\n\n    /**\n     * Scrape the lyrics from the genius.com link to the lyrics page of a song.\n     * Credit: https://jsoup.org/\n     * (Below helped me with defining user agent.\n     * Credit: https://itecnote.com/tecnote/jsoup-error-403-when-trying-to-read-the-contents-of-a-directory-on-the-website\n     */\n    public String getLyricsFromUrl(String lyricsUrl) throws IOException {\n\n        // Credit: https://itecnote.com/tecnote/jsoup-error-403-when-trying-to-read-the-contents-of-a-directory-on-the-website/\n        // !!!!! Thanks to this I am not getting 403 forbidden.\n        String userAgent = \"Mozilla/5.0\";\n\n        Connection connection = Jsoup.connect(lyricsUrl).userAgent(userAgent);\n\n        Document doc = connection.get();\n\n        Log.d(\"DOC CONTENT\", doc.toString());\n\n        Element lyricsContainer = doc.selectFirst(\"div[data-lyrics-container='true']\");\n        Log.d(\"lyricsContainer content\", lyricsContainer.toString());\n\n        String lyrics = \"\";\n\n        Log.d(\"lyricsContainer children size\", String.valueOf(lyricsContainer.childrenSize()));\n\n        Log.d(\"INSIDE IF\", \"inside lyricsContainer != null if \");\n        Elements aElements = lyricsContainer.select(\"a\");\n        Log.d(\"aElements content\", aElements.toString());\n        Log.d(\"aElements is empty\", String.valueOf(aElements.isEmpty()));\n        // For some songs on Genius.com, the lyrics are the text of the container div element.\n        // This happens when lyrics doesn't have a \"story\" with it. (See any lyrics page on\n        // genius.com for details)\n        if (aElements.isEmpty()) {\n            lyrics = lyricsContainer.html().replaceAll(\"(?i)<br[^>]*>\", \"\\n\").replaceAll(\"<.*?>\", \"\");\n        }\n        else {\n            StringBuilder lyricsBuilder = new StringBuilder();\n            Log.d(\"INSIDE IF\", \"INSIDE aElements != null\");\n            for (Element aElement: aElements) {\n                Element spanElement = aElement.selectFirst(\"span\");\n                if (spanElement != null) {\n                    // Replace all the <br> tags in html with line breaks, and remove all other tags like <i>.\n                    String lyricsHtml = spanElement.html().replaceAll(\"(?i)<br[^>]*>\", \"\\n\").replaceAll(\"<.*?>\", \"\");\n                    Log.d(\"single line lyrics\", lyricsHtml);\n                    lyricsBuilder.append(lyricsHtml).append(\"\\n\");\n                }\n            }\n            lyrics = lyricsBuilder.toString();\n        }\n\n        // Some lines have two line breaks. Replace them with one line break.\n        Log.d(\"LYRICS FROM GETLYRICSFROMURL()\", lyrics);\n        return lyrics.replaceAll(\"\\n\\n\", \"\\n\");\n    }\n\n    class GetLyricsRunnable implements Runnable {\n        private String songName;\n        private ArrayList<String> artistsList;\n        private String lyricsUrl;\n        private GeniusSong geniusSong;\n\n        public GetLyricsRunnable(String songName, ArrayList<String> artistsList, String lyricsUrl) {\n            this.songName = songName;\n            this.artistsList = artistsList;\n            this.lyricsUrl = lyricsUrl;\n        }\n\n        public GeniusSong getGeniusSong() {\n            return geniusSong;\n        }\n\n        public void setGeniusSong(GeniusSong song) {\n            this.geniusSong = song;\n        }\n\n        @Override\n        public void run() {\n            try {\n                GeniusSong songWithLyrics = new GeniusSong(this.songName, this.artistsList, getLyricsFromUrl(this.lyricsUrl));\n                setGeniusSong(songWithLyrics);\n                Log.d(\"LYRICS IN THREAD'S RUN METHOD\", geniusSong.getLyrics());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LyricsService.java b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LyricsService.java
--- a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LyricsService.java	(revision 82dbe2c502ff106e6fbba7e4f5ab9714d66c2eb3)
+++ b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/LyricsService.java	(date 1681949569130)
@@ -19,6 +19,7 @@
 import org.json.JSONObject;
 import org.jsoup.Connection;
 import org.jsoup.Jsoup;
+import org.jsoup.internal.StringUtil;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.select.Elements;
@@ -172,15 +173,13 @@
                         JSONObject topSongDetails = topSong.optJSONObject("result");
                         assert topSongDetails != null;
                         String lyricsUrl = topSongDetails.optString("url");
-                        String songName = topSongDetails.optString("full_title");
-                        String artistNames = topSongDetails.optString("artist_names");
+                        String songName = topSongDetails.optString("full_title").trim();
+                        String artistNames = topSongDetails.optString("artist_names").trim();
                         // Clean up song name to remove "by xxx" at the end, i.e. artist_names.
-                        if (songName.endsWith(artistNames)) {
-                            String actualSongNameBy = songName.substring(0, songName.length() - artistNames.length()).trim();
-                            if (actualSongNameBy.endsWith("by")) {
-                                songName = actualSongNameBy.substring(0, actualSongNameBy.length() - 2).trim();
-                            }
+                        if (songName.length() - artistNames.length() - 3 >= 0) {
+                            songName = songName.substring(0, songName.length() - artistNames.length() - 3);
                         }
+                        Log.d("song name from search", songName);
                         ArrayList<String> artistsList = new ArrayList<>();
                         artistsList.add(artistNames);
                         Log.d("TOPSONGDETAILS JSONOBJECT", topSongDetails.toString());
Index: app/src/main/res/layout/activity_current_song_page.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/current_song_activity\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@drawable/bg_blue_dark\"\n    android:orientation=\"vertical\"\n    tools:context=\".final_project.CurrentSongPageActivity\">\n\n    <LinearLayout\n        android:id=\"@+id/linearLayout7\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"100dp\"\n        android:layout_margin=\"10dp\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\">\n\n        <ImageView\n            android:id=\"@+id/currentSong_albumImage\"\n            android:layout_width=\"250dp\"\n            android:layout_height=\"match_parent\"\n            android:layout_weight=\"1\"\n            android:adjustViewBounds=\"true\"\n            android:contextClickable=\"false\"\n            android:scaleType=\"fitCenter\"\n            tools:srcCompat=\"@drawable/sticker6\" />\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"20dp\"\n            android:layout_weight=\"1\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                android:id=\"@+id/currentSong_title\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:ellipsize=\"marquee\"\n                android:focusable=\"true\"\n                android:focusableInTouchMode=\"true\"\n                android:marqueeRepeatLimit=\"marquee_forever\"\n                android:scrollHorizontally=\"true\"\n                android:singleLine=\"true\"\n                android:text=\"Yellow\"\n                android:textAlignment=\"textStart\"\n                android:textAllCaps=\"false\"\n                android:textColor=\"@color/white\"\n                android:textSize=\"24sp\"\n                android:textStyle=\"bold\"\n                android:visibility=\"visible\" />\n\n            <TextView\n                android:id=\"@+id/currentSong_artist\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"10dp\"\n                android:ellipsize=\"marquee\"\n                android:focusable=\"true\"\n                android:focusableInTouchMode=\"true\"\n                android:marqueeRepeatLimit=\"marquee_forever\"\n                android:scrollHorizontally=\"true\"\n                android:singleLine=\"true\"\n                android:text=\"Coldplay\"\n                android:textColor=\"@color/white\"\n                android:textSize=\"16sp\" />\n\n            <TextView\n                android:id=\"@+id/currentSong_lyricEditor\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"10dp\"\n                android:ellipsize=\"marquee\"\n                android:focusable=\"true\"\n                android:focusableInTouchMode=\"true\"\n                android:marqueeRepeatLimit=\"marquee_forever\"\n                android:scrollHorizontally=\"true\"\n                android:singleLine=\"true\"\n                android:text=\"Jerry Bao\"\n                android:textColor=\"@color/white\"\n                android:textSize=\"16sp\" />\n\n        </LinearLayout>\n    </LinearLayout>\n\n    <LinearLayout\n        android:id=\"@+id/linearLayout6\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n\n        android:layout_marginLeft=\"10dp\"\n        android:layout_marginTop=\"10dp\"\n        android:layout_marginRight=\"10dp\"\n        android:layout_marginBottom=\"10dp\"\n        android:orientation=\"vertical\"\n        app:layout_constraintBottom_toTopOf=\"@+id/linearLayout10\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/linearLayout7\">\n\n        <TextView\n            android:id=\"@+id/currentSong_textLyric\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginHorizontal=\"15dp\"\n            android:layout_marginVertical=\"10dp\"\n            android:scrollbars=\"vertical\"\n            android:text=\"Look at the stars Look how they shine for you And everything you do Yeah, they were all yellow I came along I wrote a song for you And all the things you do And it was called Yellow So then I took my turn Oh, what a thing to have done And it was all yellow Your skin, oh yeah, your skin and bones Turn into\"\n            android:textColor=\"@color/white\"\n            android:textSize=\"30sp\"\n            android:textStyle=\"bold\" />\n\n    </LinearLayout>\n\n    <LinearLayout\n        android:id=\"@+id/linearLayout10\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        app:layout_constraintBottom_toTopOf=\"@+id/navBarView\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\">\n\n        <LinearLayout\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"30dp\"\n            android:orientation=\"horizontal\">\n\n            <Button\n                android:id=\"@+id/editPage_fullScreenButton1\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_gravity=\"center\"\n                android:background=\"@android:color/transparent\"\n                android:drawableEnd=\"@drawable/like\" />\n\n            <Button\n                android:id=\"@+id/currentSong_buttonComment\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_gravity=\"center\"\n                android:background=\"@android:color/transparent\"\n                android:drawableEnd=\"@drawable/comment\" />\n\n            <Button\n                android:id=\"@+id/currentSong_buttonReport\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_gravity=\"center\"\n                android:background=\"@android:color/transparent\"\n                android:drawableEnd=\"@drawable/report\" />\n        </LinearLayout>\n\n        <LinearLayout\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginLeft=\"45dp\"\n            android:orientation=\"horizontal\">\n\n            <Button\n                android:id=\"@+id/currentSong_buttonEdit\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_gravity=\"center\"\n                android:background=\"@android:color/transparent\"\n                android:drawableEnd=\"@drawable/edit\"\n                tools:layout_editor_absoluteX=\"263dp\"\n                tools:layout_editor_absoluteY=\"269dp\" />\n\n            <Button\n                android:id=\"@+id/currentSong_buttonTranslate\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_gravity=\"center\"\n                android:background=\"@android:color/transparent\"\n                android:drawableEnd=\"@drawable/translate\"\n                tools:layout_editor_absoluteX=\"313dp\"\n                tools:layout_editor_absoluteY=\"269dp\" />\n\n            <Button\n                android:id=\"@+id/currentSong_buttonAddToFav\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_gravity=\"center\"\n                android:background=\"@android:color/transparent\"\n                android:drawableEnd=\"@drawable/addtofav\"\n                android:visibility=\"visible\"\n                tools:layout_editor_absoluteX=\"363dp\"\n                tools:layout_editor_absoluteY=\"269dp\" />\n\n            <Button\n                android:id=\"@+id/currentSong_buttonExistInYourLibrary\"\n                android:layout_width=\"50dp\"\n                android:layout_height=\"50dp\"\n                android:layout_gravity=\"center\"\n                android:background=\"@android:color/transparent\"\n                android:drawableEnd=\"@drawable/baseline_playlist_add_check_24\"\n                android:visibility=\"invisible\"\n                tools:layout_editor_absoluteX=\"363dp\"\n                tools:layout_editor_absoluteY=\"269dp\" />\n        </LinearLayout>\n\n    </LinearLayout>\n\n    <com.google.android.material.bottomnavigation.BottomNavigationView\n        android:id=\"@+id/navBarView\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\"\n        android:background=\"@color/transparent\"\n        app:elevation=\"0dp\"\n        app:itemIconSize=\"40dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:menu=\"@menu/menu_navigation\" />\n\n\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_current_song_page.xml b/app/src/main/res/layout/activity_current_song_page.xml
--- a/app/src/main/res/layout/activity_current_song_page.xml	(revision 82dbe2c502ff106e6fbba7e4f5ab9714d66c2eb3)
+++ b/app/src/main/res/layout/activity_current_song_page.xml	(date 1681947059943)
@@ -110,7 +110,7 @@
             android:layout_marginHorizontal="15dp"
             android:layout_marginVertical="10dp"
             android:scrollbars="vertical"
-            android:text="Look at the stars Look how they shine for you And everything you do Yeah, they were all yellow I came along I wrote a song for you And all the things you do And it was called Yellow So then I took my turn Oh, what a thing to have done And it was all yellow Your skin, oh yeah, your skin and bones Turn into"
+            android:text=""
             android:textColor="@color/white"
             android:textSize="30sp"
             android:textStyle="bold" />
Index: app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.northeastern.nucs5520sp_musiclyicsapp.final_project;\n\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.content.res.ResourcesCompat;\n\nimport android.content.Intent;\nimport android.graphics.drawable.Drawable;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.text.method.ScrollingMovementMethod;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\n\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.material.snackbar.Snackbar;\nimport com.google.firebase.auth.FirebaseAuth;\nimport com.google.firebase.auth.FirebaseUser;\nimport com.google.firebase.database.DataSnapshot;\nimport com.google.firebase.database.DatabaseError;\nimport com.google.firebase.database.DatabaseReference;\nimport com.google.firebase.database.FirebaseDatabase;\nimport com.google.firebase.database.ValueEventListener;\nimport com.google.firebase.storage.FirebaseStorage;\nimport com.google.firebase.storage.StorageException;\nimport com.google.firebase.storage.StorageReference;\nimport com.squareup.picasso.Picasso;\n\nimport edu.northeastern.nucs5520sp_musiclyicsapp.R;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.databinding.ActivityCurrentSongPageBinding;\nimport edu.northeastern.nucs5520sp_musiclyicsapp.final_project.model.SongModel;\n\n/*\nCurrent Song Page: display the current song page which include album image, song title, artist,\nlyric editor, text area where contains lyric of the song, button to like, button to comment, button\nto report, button to translate, button to edit the lyric, button to add to user database, and lastly\nthe nav bar to transit to other page\n */\n\npublic class CurrentSongPageActivity extends AppCompatActivity {\n\n    ActivityCurrentSongPageBinding binding;\n    String songName, songArtist, lyricCreator, lyric, translation, lyricCreatorId;\n    DatabaseReference databaseReferenceUsersLyricsLibrary;\n    DatabaseReference databaseReferenceReport;\n    StorageReference storageReference;\n    // this string is assigned as the node key of each song in db library\n    String songName_artist_node;\n    // check if Add Button is checked\n    Boolean isAdded;\n    String imageUrl;\n\n    DatabaseReference databaseReferenceSongLikes;\n    DatabaseReference databaseReferenceSharedLyrics;\n    DatabaseReference databaseReferenceUser;\n\n    Button currentSong_buttonComment;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        binding = ActivityCurrentSongPageBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n\n        // set the button click jump to comment page\n        currentSong_buttonComment = findViewById(R.id.currentSong_buttonComment);\n\n        // get the song's name/artist/creator infor from the library when user choose a song\n        Intent intent = getIntent();\n        songName = intent.getStringExtra(\"song_name\");\n        songArtist= intent.getStringExtra(\"song_artist\");\n        lyricCreator = intent.getStringExtra(\"lyric_creator\");\n\n        // this string is assigned as the node key of each song in db library\n        songName_artist_node = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\")+songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n        databaseReferenceUsersLyricsLibrary = FirebaseDatabase.getInstance().getReference(\"users_Lyrics_Library\").child(FirebaseAuth.getInstance().getUid());\n        databaseReferenceSharedLyrics = FirebaseDatabase.getInstance().getReference(\"shared_Lyrics\");\n\n        // edit Intent: when edit a song lyric, it will send all of information to edit page\n        Intent editIntent = new Intent(CurrentSongPageActivity.this, CreateEditPageActivity.class);\n\n        // make lyric scrolling\n        binding.currentSongTextLyric.setMovementMethod(new ScrollingMovementMethod());\n\n        Log.d(\"------song name: \", songName);\n        binding.currentSongTitle.setText(songName);\n        // auto scrollable\n        binding.currentSongTitle.setSelected(true);\n        binding.currentSongArtist.setText(\"Artist: \" + songArtist);\n        binding.currentSongArtist.setSelected(true);\n        binding.currentSongLyricEditor.setText(\"Lyric Creator: \" + lyricCreator);\n        binding.currentSongLyricEditor.setSelected(true);\n        // load image from firebase storage\n        String currentUid = FirebaseAuth.getInstance().getCurrentUser().getUid();\n        String fileName = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\") + songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\") + currentUid;\n\n        storageReference = FirebaseStorage.getInstance().getReference(\"images/\" + currentUid).child(fileName);\n\n        storageReference.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\n            @Override\n            public void onSuccess(Uri uri) {\n                imageUrl = uri.toString();\n\n                Picasso.get().load(imageUrl).into(binding.currentSongAlbumImage);\n\n\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(@NonNull Exception e) {\n                Log.d(\"-----fail to load image\", \"do not find image\");\n                binding.currentSongAlbumImage.setImageResource(R.drawable.edit_image_pic);\n            }\n        });\n\n        // set navbar\n        binding.navBarView.setSelectedItemId(R.id.navBar_currentSong);\n\n        // check if song already in user's library\n        // if already in, then the \"add\" icon will change to \"check\" icon\n        // else, show \"add\" icon\n        // if user enter current page is from library, then need to get song lyrics\n        // if user enter this from search page, then lyrics will get from api\n        databaseReferenceUsersLyricsLibrary.child(songName_artist_node).addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                // if exists\n                if(snapshot.exists()){\n                    Log.d(\"----- exists in database\", \"true\");\n                    changeIconIfAlreadyExists();\n                    // get lyric of this song and update UI\n                    lyric = snapshot.child(\"song_lyric\").getValue().toString();\n                    translation = snapshot.child(\"song_translation\").getValue().toString();\n                    //Log.d(\"-----------lyric:\", lyric);\n                    binding.currentSongTextLyric.setText(lyric);\n                } else {\n                    Log.d(\"----- exists in database\", \"false\");\n                    changeToAddIcon();\n                    // if not exist in user's library, then will show the lyrics from shared_Lyrics\n                    showSharedLyric();\n\n                }\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n\n        // find lyric Creator id\n        databaseReferenceUser = FirebaseDatabase.getInstance().getReference(\"Final_Project_Users\");\n        databaseReferenceUser.addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                for(DataSnapshot dataSnapshot:snapshot.getChildren()){\n                    if (dataSnapshot.child(\"username\").getValue().toString().equals(lyricCreator)){\n                        lyricCreatorId = dataSnapshot.getKey().toString();\n                        Log.d(\"-------lyric creator id\", lyricCreatorId);\n                        saveSongLikeOnDB(dataSnapshot.getKey().toString());\n                        //showSharedLyric(lyricCreatorId);\n                    }\n                }\n\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n\n\n        Intent commentIntent = new Intent(CurrentSongPageActivity.this, CommentActivity.class);\n        currentSong_buttonComment.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                commentIntent.putExtra(\"song_name\",songName);\n                commentIntent.putExtra(\"song_artist\", songArtist);\n                commentIntent.putExtra(\"lyricCreator\", lyricCreator);\n                commentIntent.putExtra(\"song_lyric\", lyric);\n                commentIntent.putExtra(\"song_translation\", translation);\n                commentIntent.putExtra(\"image_url\", imageUrl);\n                commentIntent.putExtra(\"lyricCreatorId\", lyricCreatorId);\n                startActivity(commentIntent);\n            }\n        });\n\n        // edit button in lyric details page will open the Create/Edit page to edit the lyric\n        binding.currentSongButtonEdit.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                editIntent.putExtra(\"song_name\", songName);\n                editIntent.putExtra(\"song_artist\", songArtist);\n                editIntent.putExtra(\"lyricCreator\", lyricCreator);\n                editIntent.putExtra(\"song_lyric\", lyric);\n                editIntent.putExtra(\"song_translation\", translation);\n                editIntent.putExtra(\"image_url\", imageUrl);\n                startActivity(new Intent(editIntent));\n                finish();\n            }\n        });\n\n        // translation Button\n        binding.currentSongButtonTranslate.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if(binding.currentSongTextLyric.getText().toString().equals(lyric)){\n                    binding.currentSongTextLyric.setText(translation);\n                    Drawable drawable = ResourcesCompat.getDrawable(\n                            getResources(),\n                            R.drawable.baseline_translate_24_green,\n                            getTheme()\n                    );\n                    binding.currentSongButtonTranslate.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n                } else if (binding.currentSongTextLyric.getText().toString().equals(translation)){\n                    binding.currentSongTextLyric.setText(lyric);\n                    Drawable drawable = ResourcesCompat.getDrawable(\n                            getResources(),\n                            R.drawable.translate,\n                            getTheme()\n                    );\n                    binding.currentSongButtonTranslate.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n                }\n\n            }\n        });\n\n        // add button action\n        binding.currentSongButtonAddToFav.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if(isAdded){\n                    databaseReferenceUsersLyricsLibrary.child(songName_artist_node).removeValue();\n                    Log.d(\"----button action\", \"removed from library\");\n                    changeToAddIcon();\n                } else {\n                    SongModel song = new SongModel(songName, songArtist,lyric,translation,lyricCreator);\n                    //Log.d(\"-----want added song\", songName + \" \" + songArtist + \" \" + lyric + \" \" + translation + \" \" + lyricCreator);\n                    databaseReferenceUsersLyricsLibrary.child(songName_artist_node).setValue(song);\n                    changeIconIfAlreadyExists();\n                    Log.d(\"-----button action\", \"added to library\");\n                }\n            }\n        });\n\n        // report button\n        binding.currentSongButtonReport.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                databaseReferenceReport = FirebaseDatabase.getInstance().getReference(\"reports\");\n                String fileName = songName.replaceAll(\"[^a-zA-Z0-9]\", \"\") + songArtist.replaceAll(\"[^a-zA-Z0-9]\", \"\") + lyricCreatorId;\n                databaseReferenceReport.child(fileName).child(currentUid).setValue(FirebaseAuth.getInstance().getCurrentUser().getEmail());\n                Snackbar snackbar = Snackbar.make(findViewById(R.id.current_song_activity), \"Thank you! We received your report.\", Snackbar.LENGTH_LONG);\n                snackbar.show();\n\n            }\n        });\n\n        // navigation bar on click action\n        binding.navBarView.setOnItemSelectedListener(item -> {\n            switch (item.getItemId()){\n                case R.id.navBar_library:\n                    startActivity(new Intent(CurrentSongPageActivity.this, LibraryPageActivity.class));\n                    break;\n                case R.id.navBar_user:\n                    startActivity(new Intent(CurrentSongPageActivity.this, UserPageActivity.class));\n                   break;\n            }\n            return true;\n        });\n\n\n\n    }\n\n    private void showSharedLyric() {\n        databaseReferenceUser.addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                for(DataSnapshot dataSnapshot:snapshot.getChildren()){\n                    if (dataSnapshot.child(\"username\").getValue().toString().equals(lyricCreator)){\n                        lyricCreatorId = dataSnapshot.getKey().toString();\n                        Log.d(\"-------lyric creator id\", lyricCreatorId);\n                        //saveSongLikeOnDB(dataSnapshot.getKey().toString());\n                        //showSharedLyric(lyricCreatorId);\n                        String path = songName.replaceAll(\"[^a-zA-Z0-9]\",\"\")+ songArtist.replaceAll(\"[^a-zA-Z0-9]\",\"\")+dataSnapshot.getKey().toString();\n                        databaseReferenceSharedLyrics.child(path).addValueEventListener(new ValueEventListener() {\n                            @Override\n                            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                                if(snapshot.exists()){\n                                    Log.d(\"------exist in shared lyric\", \"Object exists: \" + snapshot.getValue());\n                                    lyric = snapshot.child(\"song_lyric\").getValue().toString();\n                                    translation = snapshot.child(\"song_translation\").getValue().toString();\n                                    binding.currentSongTextLyric.setText(lyric);\n                                } else {\n                                    Log.d(\"------not exist in shared lyric\", \"Object not exists\");\n                                }\n                            }\n\n                            @Override\n                            public void onCancelled(@NonNull DatabaseError error) {\n\n                            }\n                        });\n                    }\n                }\n\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n\n    }\n\n    private void showUserLibraryLyric() {\n\n    }\n\n    private void saveSongLikeOnDB(String lyricCreatorId) {\n        // db like path for song\n        String path = songName.replaceAll(\"[^a-zA-Z0-9]\",\"\")+ songArtist.replaceAll(\"[^a-zA-Z0-9]\",\"\")+lyricCreatorId;\n        //check if current user liked this song lyric\n        databaseReferenceSongLikes = FirebaseDatabase.getInstance().getReference(\"likes\").child(path);\n        String currentUserId = FirebaseAuth.getInstance().getUid();\n\n        // check if user already liked this song\n        final Boolean[] isLiked = {false};\n        databaseReferenceSongLikes.addValueEventListener(new ValueEventListener() {\n            @Override\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\n                for(DataSnapshot dataSnapshot:snapshot.getChildren()){\n                    if(dataSnapshot.getKey().equals(currentUserId)){\n                         isLiked[0] = true;\n                    }\n                }\n                if(isLiked[0]){\n                    Drawable drawable = ResourcesCompat.getDrawable(\n                            getResources(),\n                            R.drawable.baseline_thumb_up_24_green,\n                            getTheme()\n\n                    );\n                    binding.editPageFullScreenButton1.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n                } else {\n                    Drawable drawable = ResourcesCompat.getDrawable(\n                            getResources(),\n                            R.drawable.like,\n                            getTheme()\n\n                    );\n                    binding.editPageFullScreenButton1.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n                }\n\n                // when click the like button\n                binding.editPageFullScreenButton1.setOnClickListener(new View.OnClickListener() {\n                    @Override\n                    public void onClick(View v) {\n                        if(isLiked[0]){\n                            Drawable drawable = ResourcesCompat.getDrawable(\n                                    getResources(),\n                                    R.drawable.like,\n                                    getTheme()\n\n                            );\n                            binding.editPageFullScreenButton1.setCompoundDrawablesWithIntrinsicBounds(null, null, drawable, null);\n                            databaseReferenceSongLikes.child(currentUserId).removeValue();\n                            isLiked[0] = false;\n                        } else {\n                            Drawable drawable = ResourcesCompat.getDrawable(\n                                    getResources(),\n                                    R.drawable.baseline_thumb_up_24_red,\n                                    getTheme()\n\n                            );\n                            binding.editPageFullScreenButton1.setCompoundDrawablesWithIntrinsicBounds(null, null, drawable, null);\n                            databaseReferenceSongLikes.child(currentUserId).setValue(currentUserId);\n                            isLiked[0] = true;\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void onCancelled(@NonNull DatabaseError error) {\n\n            }\n        });\n    }\n\n    private void changeToAddIcon() {\n        // android:drawableEnd=\"@drawable/addtofav\"\n        //Button search = (Button) findViewById(R.id.yoursearchbutton);\n        //search.setCompoundDrawablesWithIntrinsicBounds('your_drawable',null,null,null);\n        Drawable drawable = ResourcesCompat.getDrawable(\n                getResources(),\n                R.drawable.addtofav,\n                getTheme()\n        );\n        binding.currentSongButtonAddToFav.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n        isAdded = false;\n    }\n\n    private void changeIconIfAlreadyExists() {\n        // android:drawableEnd=\"@drawable/baseline_playlist_add_check_24\"\n        //Button search = (Button) findViewById(R.id.yoursearchbutton);\n        //search.setCompoundDrawablesWithIntrinsicBounds('your_drawable',null,null,null);\n        Drawable drawable = ResourcesCompat.getDrawable(\n                getResources(),\n                R.drawable.baseline_check_circle_outline_24,\n                getTheme()\n        );\n        binding.currentSongButtonAddToFav.setCompoundDrawablesWithIntrinsicBounds(null,null,drawable,null);\n        isAdded = true;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java
--- a/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java	(revision 82dbe2c502ff106e6fbba7e4f5ab9714d66c2eb3)
+++ b/app/src/main/java/edu/northeastern/nucs5520sp_musiclyicsapp/final_project/CurrentSongPageActivity.java	(date 1681948152523)
@@ -75,6 +75,8 @@
         songName = intent.getStringExtra("song_name");
         songArtist= intent.getStringExtra("song_artist");
         lyricCreator = intent.getStringExtra("lyric_creator");
+        lyric = intent.getStringExtra("lyric");
+        translation = intent.getStringExtra("song_translation");
 
         // this string is assigned as the node key of each song in db library
         songName_artist_node = songName.replaceAll("[^a-zA-Z0-9]", "")+songArtist.replaceAll("[^a-zA-Z0-9]", "");
@@ -95,6 +97,9 @@
         binding.currentSongArtist.setSelected(true);
         binding.currentSongLyricEditor.setText("Lyric Creator: " + lyricCreator);
         binding.currentSongLyricEditor.setSelected(true);
+
+        //Log.d("-----------lyric:", lyric);
+        binding.currentSongTextLyric.setText(lyric);
         // load image from firebase storage
         String currentUid = FirebaseAuth.getInstance().getCurrentUser().getUid();
         String fileName = songName.replaceAll("[^a-zA-Z0-9]", "") + songArtist.replaceAll("[^a-zA-Z0-9]", "") + currentUid;
@@ -134,10 +139,10 @@
                     Log.d("----- exists in database", "true");
                     changeIconIfAlreadyExists();
                     // get lyric of this song and update UI
-                    lyric = snapshot.child("song_lyric").getValue().toString();
+                    //lyric = snapshot.child("song_lyric").getValue().toString();
                     translation = snapshot.child("song_translation").getValue().toString();
-                    //Log.d("-----------lyric:", lyric);
-                    binding.currentSongTextLyric.setText(lyric);
+//                    //Log.d("-----------lyric:", lyric);
+//                    binding.currentSongTextLyric.setText(lyric);
                 } else {
                     Log.d("----- exists in database", "false");
                     changeToAddIcon();
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetDropDown\">\n    <targetSelectedWithDropDown>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$USER_HOME$/.android/avd/Pixel_6_Pro_API_29.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </targetSelectedWithDropDown>\n    <timeTargetWasSelectedWithDropDown value=\"2023-04-19T14:11:56.942063Z\" />\n    <targetsSelectedWithDialog>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$USER_HOME$/.android/avd/Pixel_3_API_29.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n      <Target>\n        <type value=\"QUICK_BOOT_TARGET\" />\n        <deviceKey>\n          <Key>\n            <type value=\"VIRTUAL_DEVICE_PATH\" />\n            <value value=\"$USER_HOME$/.android/avd/Pixel_6_Pro_API_29.avd\" />\n          </Key>\n        </deviceKey>\n      </Target>\n    </targetsSelectedWithDialog>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
--- a/.idea/deploymentTargetDropDown.xml	(revision 82dbe2c502ff106e6fbba7e4f5ab9714d66c2eb3)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1681956879531)
@@ -7,12 +7,12 @@
         <deviceKey>
           <Key>
             <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="$USER_HOME$/.android/avd/Pixel_6_Pro_API_29.avd" />
+            <value value="$USER_HOME$/.android/avd/Pixel_4_API_29.avd" />
           </Key>
         </deviceKey>
       </Target>
     </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-04-19T14:11:56.942063Z" />
+    <timeTargetWasSelectedWithDropDown value="2023-04-20T02:14:35.870925Z" />
     <targetsSelectedWithDialog>
       <Target>
         <type value="QUICK_BOOT_TARGET" />
